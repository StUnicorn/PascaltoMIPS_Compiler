Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    RESERVED_CONST
    RESERVED_FALSE
    RESERVED_TRUE

Grammar

Rule 0     S' -> program
Rule 1     sign -> +
Rule 2     sign -> -
Rule 3     non_string -> DIGITSEQ
Rule 4     identifier_list -> identifier_list comma identifier
Rule 5     identifier_list -> identifier
Rule 6     constant -> non_string
Rule 7     constant -> sign non_string
Rule 8     type_definition_list -> type_definition_list type_definition
Rule 9     type_definition_list -> type_definition
Rule 10    type_definition -> identifier = type_denoter semicolon
Rule 11    type_denoter -> identifier
Rule 12    component_type -> identifier
Rule 13    domain_type -> identifier
Rule 14    variable_declaration_part -> RESERVED_VAR variable_declaration_list semicolon
Rule 15    variable_declaration -> identifier_list COLON type_denoter
Rule 16    variable_declaration_list -> variable_declaration_list semicolon variable_declaration
Rule 17    variable_declaration_list -> variable_declaration
Rule 18    procedure_and_function_declaration_part -> function_declaration semicolon
Rule 19    formal_parameter_section_list -> formal_parameter_section_list semicolon formal_parameter_section
Rule 20    formal_parameter_section_list -> formal_parameter_section
Rule 21    formal_parameter_list -> LPAREN formal_parameter_section_list RPAREN
Rule 22    formal_parameter_section -> value_parameter_specification
Rule 23    formal_parameter_section -> variable_parameter_specification
Rule 24    value_parameter_specification -> identifier_list COLON identifier
Rule 25    procedure_block -> block
Rule 26    simple_expression -> term
Rule 27    simple_expression -> simple_expression addop term
Rule 28    function_declaration -> function_identification semicolon function_block
Rule 29    function_declaration -> function_heading semicolon function_block
Rule 30    function_heading -> RESERVED_FUNCTION identifier COLON result_type
Rule 31    function_heading -> RESERVED_FUNCTION identifier marker_fh formal_parameter_list COLON result_type
Rule 32    declaration_part_list -> declaration_part_list declaration_entity
Rule 33    declaration_part_list -> declaration_entity
Rule 34    marker_fh -> <empty>
Rule 35    primary -> variable_access
Rule 36    primary -> unsigned_constant
Rule 37    primary -> function_designator
Rule 38    result_type -> identifier
Rule 39    function_identification -> RESERVED_FUNCTION identifier
Rule 40    function_block -> block
Rule 41    statement_part -> compound_statement
Rule 42    compound_statement -> RESERVED_BEGIN statement_sequence RESERVED_END
Rule 43    variable_parameter_specification -> RESERVED_VAR identifier_list COLON identifier
Rule 44    statement_sequence -> statement_sequence semicolon statement
Rule 45    statement_sequence -> statement
Rule 46    statement -> open_statement
Rule 47    statement -> closed_statement
Rule 48    open_statement -> non_labeled_open_statement
Rule 49    closed_statement -> non_labeled_closed_statement
Rule 50    non_labeled_closed_statement -> assignment_statement
Rule 51    non_labeled_closed_statement -> procedure_statement
Rule 52    non_labeled_closed_statement -> compound_statement
Rule 53    non_labeled_closed_statement -> repeat_statement
Rule 54    non_labeled_closed_statement -> closed_while_statement
Rule 55    non_labeled_closed_statement -> closed_for_statement
Rule 56    non_labeled_closed_statement -> <empty>
Rule 57    non_labeled_open_statement -> open_if_statement
Rule 58    non_labeled_open_statement -> open_while_statement
Rule 59    non_labeled_open_statement -> open_for_statement
Rule 60    repeat_statement -> RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression
Rule 61    repeat_begin_marker -> <empty>
Rule 62    open_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO open_statement
Rule 63    closed_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO closed_statement
Rule 64    marker_while -> <empty>
Rule 65    open_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement
Rule 66    closed_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement
Rule 67    marker_for_for_branching -> <empty>
Rule 68    open_if_statement -> RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching statement
Rule 69    marker_if_false -> <empty>
Rule 70    marker_for_branching -> <empty>
Rule 71    assignment_statement -> variable_access ASSIGNMENT expression
Rule 72    variable_access -> identifier
Rule 73    index_expression_list -> index_expression_list comma index_expression
Rule 74    index_expression_list -> index_expression
Rule 75    index_expression -> expression
Rule 76    procedure_statement -> identifier params
Rule 77    procedure_statement -> identifier
Rule 78    declaration_entity -> procedure_and_function_declaration_part
Rule 79    params -> LPAREN actual_parameter_list RPAREN
Rule 80    actual_parameter_list -> actual_parameter_list comma actual_parameter
Rule 81    actual_parameter_list -> actual_parameter
Rule 82    actual_parameter -> expression
Rule 83    actual_parameter -> expression COLON expression
Rule 84    actual_parameter -> expression COLON expression COLON expression
Rule 85    control_variable -> identifier
Rule 86    initial_value -> expression
Rule 87    direction -> RESERVED_TO
Rule 88    final_value -> expression
Rule 89    record_variable_list -> record_variable_list comma variable_access
Rule 90    record_variable_list -> variable_access
Rule 91    boolean_expression -> expression
Rule 92    unsigned_constant -> unsigned_number
Rule 93    unsigned_constant -> STRING
Rule 94    block -> declaration_part_list statement_part
Rule 95    block -> statement_part
Rule 96    declaration_entity -> variable_declaration_part
Rule 97    expression -> simple_expression
Rule 98    expression -> simple_expression relop simple_expression
Rule 99    term -> factor
Rule 100   term -> term mulop factor
Rule 101   factor -> sign factor
Rule 102   factor -> exponentiation
Rule 103   exponentiation -> primary
Rule 104   primary -> LPAREN expression RPAREN
Rule 105   primary -> RESERVED_NOT primary
Rule 106   unsigned_number -> unsigned_integer
Rule 107   unsigned_number -> unsigned_real
Rule 108   unsigned_integer -> DIGITSEQ
Rule 109   unsigned_real -> REALNUMBER
Rule 110   function_designator -> identifier params
Rule 111   addop -> +
Rule 112   addop -> -
Rule 113   addop -> RESERVED_OR
Rule 114   mulop -> *
Rule 115   mulop -> /
Rule 116   mulop -> RESERVED_DIV
Rule 117   mulop -> RESERVED_MOD
Rule 118   mulop -> RESERVED_AND
Rule 119   relop -> =
Rule 120   relop -> NOTEQ
Rule 121   relop -> <
Rule 122   relop -> >
Rule 123   relop -> LESSOREQ
Rule 124   relop -> MOREOREQ
Rule 125   identifier -> IDENTIFIER
Rule 126   identifier -> RESERVED_STRING
Rule 127   semicolon -> SEMI_COLON
Rule 128   comma -> COMMA
Rule 129   program -> program_heading semicolon block DOT
Rule 130   program_heading -> RESERVED_PROGRAM identifier
Rule 131   program_heading -> RESERVED_PROGRAM identifier LPAREN identifier_list RPAREN

Terminals, with rules where they appear

*                    : 114
+                    : 1 111
-                    : 2 112
/                    : 115
<                    : 121
=                    : 10 119
>                    : 122
ASSIGNMENT           : 65 66 71
COLON                : 15 24 30 31 43 83 84 84
COMMA                : 128
COMMENT              : 
DIGITSEQ             : 3 108
DOT                  : 129
IDENTIFIER           : 125
LESSOREQ             : 123
LPAREN               : 21 79 104 131
MOREOREQ             : 124
NOTEQ                : 120
REALNUMBER           : 109
RESERVED_AND         : 118
RESERVED_BEGIN       : 42
RESERVED_CONST       : 
RESERVED_DIV         : 116
RESERVED_DO          : 62 63 65 66
RESERVED_END         : 42
RESERVED_FALSE       : 
RESERVED_FOR         : 65 66
RESERVED_FUNCTION    : 30 31 39
RESERVED_IF          : 68
RESERVED_MOD         : 117
RESERVED_NOT         : 105
RESERVED_OR          : 113
RESERVED_PROGRAM     : 130 131
RESERVED_REPEAT      : 60
RESERVED_STRING      : 126
RESERVED_THEN        : 68
RESERVED_TO          : 87
RESERVED_TRUE        : 
RESERVED_UNTIL       : 60
RESERVED_VAR         : 14 43
RESERVED_WHILE       : 62 63
RPAREN               : 21 79 104 131
SEMI_COLON           : 127
STRING               : 93
error                : 

Nonterminals, with rules where they appear

actual_parameter     : 80 81
actual_parameter_list : 79 80
addop                : 27
assignment_statement : 50
block                : 25 40 129
boolean_expression   : 60 62 63 68
closed_for_statement : 55
closed_statement     : 47 63 66
closed_while_statement : 54
comma                : 4 73 80 89
component_type       : 
compound_statement   : 41 52
constant             : 
control_variable     : 65 66
declaration_entity   : 32 33
declaration_part_list : 32 94
direction            : 65 66
domain_type          : 
exponentiation       : 102
expression           : 71 75 82 83 83 84 84 84 86 88 91 104
factor               : 99 100 101
final_value          : 65 66
formal_parameter_list : 31
formal_parameter_section : 19 20
formal_parameter_section_list : 19 21
function_block       : 28 29
function_declaration : 18
function_designator  : 37
function_heading     : 29
function_identification : 28
identifier           : 4 5 10 11 12 13 24 30 31 38 39 43 72 76 77 85 110 130 131
identifier_list      : 4 15 24 43 131
index_expression     : 73 74
index_expression_list : 73
initial_value        : 65 66
marker_fh            : 31
marker_for_branching : 68
marker_for_for_branching : 65 66
marker_if_false      : 
marker_while         : 62 63
mulop                : 100
non_labeled_closed_statement : 49
non_labeled_open_statement : 48
non_string           : 6 7
open_for_statement   : 59
open_if_statement    : 57
open_statement       : 46 62 65
open_while_statement : 58
params               : 76 110
primary              : 103 105
procedure_and_function_declaration_part : 78
procedure_block      : 
procedure_statement  : 51
program              : 0
program_heading      : 129
record_variable_list : 89
relop                : 98
repeat_begin_marker  : 60
repeat_statement     : 53
result_type          : 30 31
semicolon            : 10 14 16 18 19 28 29 44 129
sign                 : 7 101
simple_expression    : 27 97 98 98
statement            : 44 45 68
statement_part       : 94 95
statement_sequence   : 42 44 60
term                 : 26 27 100
type_definition      : 8 9
type_definition_list : 8
type_denoter         : 10 15
unsigned_constant    : 36
unsigned_integer     : 106
unsigned_number      : 92
unsigned_real        : 107
value_parameter_specification : 22
variable_access      : 35 71 89 90
variable_declaration : 16 17
variable_declaration_list : 14 16
variable_declaration_part : 96
variable_parameter_specification : 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (129) program -> . program_heading semicolon block DOT
    (130) program_heading -> . RESERVED_PROGRAM identifier
    (131) program_heading -> . RESERVED_PROGRAM identifier LPAREN identifier_list RPAREN

    RESERVED_PROGRAM shift and go to state 3

    program                        shift and go to state 1
    program_heading                shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (129) program -> program_heading . semicolon block DOT
    (127) semicolon -> . SEMI_COLON

    SEMI_COLON      shift and go to state 5

    semicolon                      shift and go to state 4

state 3

    (130) program_heading -> RESERVED_PROGRAM . identifier
    (131) program_heading -> RESERVED_PROGRAM . identifier LPAREN identifier_list RPAREN
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    identifier                     shift and go to state 6

state 4

    (129) program -> program_heading semicolon . block DOT
    (94) block -> . declaration_part_list statement_part
    (95) block -> . statement_part
    (32) declaration_part_list -> . declaration_part_list declaration_entity
    (33) declaration_part_list -> . declaration_entity
    (41) statement_part -> . compound_statement
    (78) declaration_entity -> . procedure_and_function_declaration_part
    (96) declaration_entity -> . variable_declaration_part
    (42) compound_statement -> . RESERVED_BEGIN statement_sequence RESERVED_END
    (18) procedure_and_function_declaration_part -> . function_declaration semicolon
    (14) variable_declaration_part -> . RESERVED_VAR variable_declaration_list semicolon
    (28) function_declaration -> . function_identification semicolon function_block
    (29) function_declaration -> . function_heading semicolon function_block
    (39) function_identification -> . RESERVED_FUNCTION identifier
    (30) function_heading -> . RESERVED_FUNCTION identifier COLON result_type
    (31) function_heading -> . RESERVED_FUNCTION identifier marker_fh formal_parameter_list COLON result_type

    RESERVED_BEGIN  shift and go to state 16
    RESERVED_VAR    shift and go to state 18
    RESERVED_FUNCTION shift and go to state 21

    block                          shift and go to state 9
    declaration_part_list          shift and go to state 10
    statement_part                 shift and go to state 11
    declaration_entity             shift and go to state 12
    compound_statement             shift and go to state 13
    procedure_and_function_declaration_part shift and go to state 14
    variable_declaration_part      shift and go to state 15
    function_declaration           shift and go to state 17
    function_identification        shift and go to state 19
    function_heading               shift and go to state 20

state 5

    (127) semicolon -> SEMI_COLON .

    RESERVED_BEGIN  reduce using rule 127 (semicolon -> SEMI_COLON .)
    RESERVED_VAR    reduce using rule 127 (semicolon -> SEMI_COLON .)
    RESERVED_FUNCTION reduce using rule 127 (semicolon -> SEMI_COLON .)
    RESERVED_IF     reduce using rule 127 (semicolon -> SEMI_COLON .)
    RESERVED_WHILE  reduce using rule 127 (semicolon -> SEMI_COLON .)
    RESERVED_FOR    reduce using rule 127 (semicolon -> SEMI_COLON .)
    RESERVED_REPEAT reduce using rule 127 (semicolon -> SEMI_COLON .)
    IDENTIFIER      reduce using rule 127 (semicolon -> SEMI_COLON .)
    RESERVED_STRING reduce using rule 127 (semicolon -> SEMI_COLON .)
    RESERVED_END    reduce using rule 127 (semicolon -> SEMI_COLON .)
    SEMI_COLON      reduce using rule 127 (semicolon -> SEMI_COLON .)
    RESERVED_UNTIL  reduce using rule 127 (semicolon -> SEMI_COLON .)


state 6

    (130) program_heading -> RESERVED_PROGRAM identifier .
    (131) program_heading -> RESERVED_PROGRAM identifier . LPAREN identifier_list RPAREN

    SEMI_COLON      reduce using rule 130 (program_heading -> RESERVED_PROGRAM identifier .)
    LPAREN          shift and go to state 22


state 7

    (125) identifier -> IDENTIFIER .

    LPAREN          reduce using rule 125 (identifier -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 125 (identifier -> IDENTIFIER .)
    RESERVED_END    reduce using rule 125 (identifier -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 125 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 125 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 125 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 125 (identifier -> IDENTIFIER .)
    *               reduce using rule 125 (identifier -> IDENTIFIER .)
    /               reduce using rule 125 (identifier -> IDENTIFIER .)
    RESERVED_DIV    reduce using rule 125 (identifier -> IDENTIFIER .)
    RESERVED_MOD    reduce using rule 125 (identifier -> IDENTIFIER .)
    RESERVED_AND    reduce using rule 125 (identifier -> IDENTIFIER .)
    =               reduce using rule 125 (identifier -> IDENTIFIER .)
    NOTEQ           reduce using rule 125 (identifier -> IDENTIFIER .)
    <               reduce using rule 125 (identifier -> IDENTIFIER .)
    >               reduce using rule 125 (identifier -> IDENTIFIER .)
    LESSOREQ        reduce using rule 125 (identifier -> IDENTIFIER .)
    MOREOREQ        reduce using rule 125 (identifier -> IDENTIFIER .)
    +               reduce using rule 125 (identifier -> IDENTIFIER .)
    -               reduce using rule 125 (identifier -> IDENTIFIER .)
    RESERVED_OR     reduce using rule 125 (identifier -> IDENTIFIER .)
    RESERVED_THEN   reduce using rule 125 (identifier -> IDENTIFIER .)
    RESERVED_DO     reduce using rule 125 (identifier -> IDENTIFIER .)
    RESERVED_UNTIL  reduce using rule 125 (identifier -> IDENTIFIER .)
    RESERVED_TO     reduce using rule 125 (identifier -> IDENTIFIER .)


state 8

    (126) identifier -> RESERVED_STRING .

    LPAREN          reduce using rule 126 (identifier -> RESERVED_STRING .)
    SEMI_COLON      reduce using rule 126 (identifier -> RESERVED_STRING .)
    RESERVED_END    reduce using rule 126 (identifier -> RESERVED_STRING .)
    ASSIGNMENT      reduce using rule 126 (identifier -> RESERVED_STRING .)
    COLON           reduce using rule 126 (identifier -> RESERVED_STRING .)
    COMMA           reduce using rule 126 (identifier -> RESERVED_STRING .)
    RPAREN          reduce using rule 126 (identifier -> RESERVED_STRING .)
    *               reduce using rule 126 (identifier -> RESERVED_STRING .)
    /               reduce using rule 126 (identifier -> RESERVED_STRING .)
    RESERVED_DIV    reduce using rule 126 (identifier -> RESERVED_STRING .)
    RESERVED_MOD    reduce using rule 126 (identifier -> RESERVED_STRING .)
    RESERVED_AND    reduce using rule 126 (identifier -> RESERVED_STRING .)
    =               reduce using rule 126 (identifier -> RESERVED_STRING .)
    NOTEQ           reduce using rule 126 (identifier -> RESERVED_STRING .)
    <               reduce using rule 126 (identifier -> RESERVED_STRING .)
    >               reduce using rule 126 (identifier -> RESERVED_STRING .)
    LESSOREQ        reduce using rule 126 (identifier -> RESERVED_STRING .)
    MOREOREQ        reduce using rule 126 (identifier -> RESERVED_STRING .)
    +               reduce using rule 126 (identifier -> RESERVED_STRING .)
    -               reduce using rule 126 (identifier -> RESERVED_STRING .)
    RESERVED_OR     reduce using rule 126 (identifier -> RESERVED_STRING .)
    RESERVED_THEN   reduce using rule 126 (identifier -> RESERVED_STRING .)
    RESERVED_DO     reduce using rule 126 (identifier -> RESERVED_STRING .)
    RESERVED_UNTIL  reduce using rule 126 (identifier -> RESERVED_STRING .)
    RESERVED_TO     reduce using rule 126 (identifier -> RESERVED_STRING .)


state 9

    (129) program -> program_heading semicolon block . DOT

    DOT             shift and go to state 23


state 10

    (94) block -> declaration_part_list . statement_part
    (32) declaration_part_list -> declaration_part_list . declaration_entity
    (41) statement_part -> . compound_statement
    (78) declaration_entity -> . procedure_and_function_declaration_part
    (96) declaration_entity -> . variable_declaration_part
    (42) compound_statement -> . RESERVED_BEGIN statement_sequence RESERVED_END
    (18) procedure_and_function_declaration_part -> . function_declaration semicolon
    (14) variable_declaration_part -> . RESERVED_VAR variable_declaration_list semicolon
    (28) function_declaration -> . function_identification semicolon function_block
    (29) function_declaration -> . function_heading semicolon function_block
    (39) function_identification -> . RESERVED_FUNCTION identifier
    (30) function_heading -> . RESERVED_FUNCTION identifier COLON result_type
    (31) function_heading -> . RESERVED_FUNCTION identifier marker_fh formal_parameter_list COLON result_type

    RESERVED_BEGIN  shift and go to state 16
    RESERVED_VAR    shift and go to state 18
    RESERVED_FUNCTION shift and go to state 21

    statement_part                 shift and go to state 24
    declaration_entity             shift and go to state 25
    compound_statement             shift and go to state 13
    procedure_and_function_declaration_part shift and go to state 14
    variable_declaration_part      shift and go to state 15
    function_declaration           shift and go to state 17
    function_identification        shift and go to state 19
    function_heading               shift and go to state 20

state 11

    (95) block -> statement_part .

    DOT             reduce using rule 95 (block -> statement_part .)
    SEMI_COLON      reduce using rule 95 (block -> statement_part .)


state 12

    (33) declaration_part_list -> declaration_entity .

    RESERVED_BEGIN  reduce using rule 33 (declaration_part_list -> declaration_entity .)
    RESERVED_VAR    reduce using rule 33 (declaration_part_list -> declaration_entity .)
    RESERVED_FUNCTION reduce using rule 33 (declaration_part_list -> declaration_entity .)


state 13

    (41) statement_part -> compound_statement .

    DOT             reduce using rule 41 (statement_part -> compound_statement .)
    SEMI_COLON      reduce using rule 41 (statement_part -> compound_statement .)


state 14

    (78) declaration_entity -> procedure_and_function_declaration_part .

    RESERVED_BEGIN  reduce using rule 78 (declaration_entity -> procedure_and_function_declaration_part .)
    RESERVED_VAR    reduce using rule 78 (declaration_entity -> procedure_and_function_declaration_part .)
    RESERVED_FUNCTION reduce using rule 78 (declaration_entity -> procedure_and_function_declaration_part .)


state 15

    (96) declaration_entity -> variable_declaration_part .

    RESERVED_BEGIN  reduce using rule 96 (declaration_entity -> variable_declaration_part .)
    RESERVED_VAR    reduce using rule 96 (declaration_entity -> variable_declaration_part .)
    RESERVED_FUNCTION reduce using rule 96 (declaration_entity -> variable_declaration_part .)


state 16

    (42) compound_statement -> RESERVED_BEGIN . statement_sequence RESERVED_END
    (44) statement_sequence -> . statement_sequence semicolon statement
    (45) statement_sequence -> . statement
    (46) statement -> . open_statement
    (47) statement -> . closed_statement
    (48) open_statement -> . non_labeled_open_statement
    (49) closed_statement -> . non_labeled_closed_statement
    (57) non_labeled_open_statement -> . open_if_statement
    (58) non_labeled_open_statement -> . open_while_statement
    (59) non_labeled_open_statement -> . open_for_statement
    (50) non_labeled_closed_statement -> . assignment_statement
    (51) non_labeled_closed_statement -> . procedure_statement
    (52) non_labeled_closed_statement -> . compound_statement
    (53) non_labeled_closed_statement -> . repeat_statement
    (54) non_labeled_closed_statement -> . closed_while_statement
    (55) non_labeled_closed_statement -> . closed_for_statement
    (56) non_labeled_closed_statement -> .
    (68) open_if_statement -> . RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching statement
    (62) open_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO open_statement
    (65) open_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement
    (71) assignment_statement -> . variable_access ASSIGNMENT expression
    (76) procedure_statement -> . identifier params
    (77) procedure_statement -> . identifier
    (42) compound_statement -> . RESERVED_BEGIN statement_sequence RESERVED_END
    (60) repeat_statement -> . RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression
    (63) closed_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO closed_statement
    (66) closed_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement
    (72) variable_access -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    RESERVED_END    reduce using rule 56 (non_labeled_closed_statement -> .)
    SEMI_COLON      reduce using rule 56 (non_labeled_closed_statement -> .)
    RESERVED_IF     shift and go to state 41
    RESERVED_WHILE  shift and go to state 42
    RESERVED_FOR    shift and go to state 43
    RESERVED_BEGIN  shift and go to state 16
    RESERVED_REPEAT shift and go to state 46
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    statement_sequence             shift and go to state 26
    statement                      shift and go to state 27
    open_statement                 shift and go to state 28
    closed_statement               shift and go to state 29
    non_labeled_open_statement     shift and go to state 30
    non_labeled_closed_statement   shift and go to state 31
    open_if_statement              shift and go to state 32
    open_while_statement           shift and go to state 33
    open_for_statement             shift and go to state 34
    assignment_statement           shift and go to state 35
    procedure_statement            shift and go to state 36
    compound_statement             shift and go to state 37
    repeat_statement               shift and go to state 38
    closed_while_statement         shift and go to state 39
    closed_for_statement           shift and go to state 40
    variable_access                shift and go to state 44
    identifier                     shift and go to state 45

state 17

    (18) procedure_and_function_declaration_part -> function_declaration . semicolon
    (127) semicolon -> . SEMI_COLON

    SEMI_COLON      shift and go to state 5

    semicolon                      shift and go to state 47

state 18

    (14) variable_declaration_part -> RESERVED_VAR . variable_declaration_list semicolon
    (16) variable_declaration_list -> . variable_declaration_list semicolon variable_declaration
    (17) variable_declaration_list -> . variable_declaration
    (15) variable_declaration -> . identifier_list COLON type_denoter
    (4) identifier_list -> . identifier_list comma identifier
    (5) identifier_list -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    variable_declaration_list      shift and go to state 48
    variable_declaration           shift and go to state 49
    identifier_list                shift and go to state 50
    identifier                     shift and go to state 51

state 19

    (28) function_declaration -> function_identification . semicolon function_block
    (127) semicolon -> . SEMI_COLON

    SEMI_COLON      shift and go to state 5

    semicolon                      shift and go to state 52

state 20

    (29) function_declaration -> function_heading . semicolon function_block
    (127) semicolon -> . SEMI_COLON

    SEMI_COLON      shift and go to state 5

    semicolon                      shift and go to state 53

state 21

    (39) function_identification -> RESERVED_FUNCTION . identifier
    (30) function_heading -> RESERVED_FUNCTION . identifier COLON result_type
    (31) function_heading -> RESERVED_FUNCTION . identifier marker_fh formal_parameter_list COLON result_type
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    identifier                     shift and go to state 54

state 22

    (131) program_heading -> RESERVED_PROGRAM identifier LPAREN . identifier_list RPAREN
    (4) identifier_list -> . identifier_list comma identifier
    (5) identifier_list -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    identifier                     shift and go to state 51
    identifier_list                shift and go to state 55

state 23

    (129) program -> program_heading semicolon block DOT .

    $end            reduce using rule 129 (program -> program_heading semicolon block DOT .)


state 24

    (94) block -> declaration_part_list statement_part .

    DOT             reduce using rule 94 (block -> declaration_part_list statement_part .)
    SEMI_COLON      reduce using rule 94 (block -> declaration_part_list statement_part .)


state 25

    (32) declaration_part_list -> declaration_part_list declaration_entity .

    RESERVED_BEGIN  reduce using rule 32 (declaration_part_list -> declaration_part_list declaration_entity .)
    RESERVED_VAR    reduce using rule 32 (declaration_part_list -> declaration_part_list declaration_entity .)
    RESERVED_FUNCTION reduce using rule 32 (declaration_part_list -> declaration_part_list declaration_entity .)


state 26

    (42) compound_statement -> RESERVED_BEGIN statement_sequence . RESERVED_END
    (44) statement_sequence -> statement_sequence . semicolon statement
    (127) semicolon -> . SEMI_COLON

    RESERVED_END    shift and go to state 56
    SEMI_COLON      shift and go to state 5

    semicolon                      shift and go to state 57

state 27

    (45) statement_sequence -> statement .

    RESERVED_END    reduce using rule 45 (statement_sequence -> statement .)
    SEMI_COLON      reduce using rule 45 (statement_sequence -> statement .)
    RESERVED_UNTIL  reduce using rule 45 (statement_sequence -> statement .)


state 28

    (46) statement -> open_statement .

    RESERVED_END    reduce using rule 46 (statement -> open_statement .)
    SEMI_COLON      reduce using rule 46 (statement -> open_statement .)
    RESERVED_UNTIL  reduce using rule 46 (statement -> open_statement .)


state 29

    (47) statement -> closed_statement .

    RESERVED_END    reduce using rule 47 (statement -> closed_statement .)
    SEMI_COLON      reduce using rule 47 (statement -> closed_statement .)
    RESERVED_UNTIL  reduce using rule 47 (statement -> closed_statement .)


state 30

    (48) open_statement -> non_labeled_open_statement .

    RESERVED_END    reduce using rule 48 (open_statement -> non_labeled_open_statement .)
    SEMI_COLON      reduce using rule 48 (open_statement -> non_labeled_open_statement .)
    RESERVED_UNTIL  reduce using rule 48 (open_statement -> non_labeled_open_statement .)


state 31

    (49) closed_statement -> non_labeled_closed_statement .

    RESERVED_END    reduce using rule 49 (closed_statement -> non_labeled_closed_statement .)
    SEMI_COLON      reduce using rule 49 (closed_statement -> non_labeled_closed_statement .)
    RESERVED_UNTIL  reduce using rule 49 (closed_statement -> non_labeled_closed_statement .)


state 32

    (57) non_labeled_open_statement -> open_if_statement .

    RESERVED_END    reduce using rule 57 (non_labeled_open_statement -> open_if_statement .)
    SEMI_COLON      reduce using rule 57 (non_labeled_open_statement -> open_if_statement .)
    RESERVED_UNTIL  reduce using rule 57 (non_labeled_open_statement -> open_if_statement .)


state 33

    (58) non_labeled_open_statement -> open_while_statement .

    RESERVED_END    reduce using rule 58 (non_labeled_open_statement -> open_while_statement .)
    SEMI_COLON      reduce using rule 58 (non_labeled_open_statement -> open_while_statement .)
    RESERVED_UNTIL  reduce using rule 58 (non_labeled_open_statement -> open_while_statement .)


state 34

    (59) non_labeled_open_statement -> open_for_statement .

    RESERVED_END    reduce using rule 59 (non_labeled_open_statement -> open_for_statement .)
    SEMI_COLON      reduce using rule 59 (non_labeled_open_statement -> open_for_statement .)
    RESERVED_UNTIL  reduce using rule 59 (non_labeled_open_statement -> open_for_statement .)


state 35

    (50) non_labeled_closed_statement -> assignment_statement .

    RESERVED_END    reduce using rule 50 (non_labeled_closed_statement -> assignment_statement .)
    SEMI_COLON      reduce using rule 50 (non_labeled_closed_statement -> assignment_statement .)
    RESERVED_UNTIL  reduce using rule 50 (non_labeled_closed_statement -> assignment_statement .)


state 36

    (51) non_labeled_closed_statement -> procedure_statement .

    RESERVED_END    reduce using rule 51 (non_labeled_closed_statement -> procedure_statement .)
    SEMI_COLON      reduce using rule 51 (non_labeled_closed_statement -> procedure_statement .)
    RESERVED_UNTIL  reduce using rule 51 (non_labeled_closed_statement -> procedure_statement .)


state 37

    (52) non_labeled_closed_statement -> compound_statement .

    RESERVED_END    reduce using rule 52 (non_labeled_closed_statement -> compound_statement .)
    SEMI_COLON      reduce using rule 52 (non_labeled_closed_statement -> compound_statement .)
    RESERVED_UNTIL  reduce using rule 52 (non_labeled_closed_statement -> compound_statement .)


state 38

    (53) non_labeled_closed_statement -> repeat_statement .

    RESERVED_END    reduce using rule 53 (non_labeled_closed_statement -> repeat_statement .)
    SEMI_COLON      reduce using rule 53 (non_labeled_closed_statement -> repeat_statement .)
    RESERVED_UNTIL  reduce using rule 53 (non_labeled_closed_statement -> repeat_statement .)


state 39

    (54) non_labeled_closed_statement -> closed_while_statement .

    RESERVED_END    reduce using rule 54 (non_labeled_closed_statement -> closed_while_statement .)
    SEMI_COLON      reduce using rule 54 (non_labeled_closed_statement -> closed_while_statement .)
    RESERVED_UNTIL  reduce using rule 54 (non_labeled_closed_statement -> closed_while_statement .)


state 40

    (55) non_labeled_closed_statement -> closed_for_statement .

    RESERVED_END    reduce using rule 55 (non_labeled_closed_statement -> closed_for_statement .)
    SEMI_COLON      reduce using rule 55 (non_labeled_closed_statement -> closed_for_statement .)
    RESERVED_UNTIL  reduce using rule 55 (non_labeled_closed_statement -> closed_for_statement .)


state 41

    (68) open_if_statement -> RESERVED_IF . boolean_expression RESERVED_THEN marker_for_branching statement
    (91) boolean_expression -> . expression
    (97) expression -> . simple_expression
    (98) expression -> . simple_expression relop simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    boolean_expression             shift and go to state 58
    expression                     shift and go to state 59
    simple_expression              shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 42

    (62) open_while_statement -> RESERVED_WHILE . boolean_expression marker_while RESERVED_DO open_statement
    (63) closed_while_statement -> RESERVED_WHILE . boolean_expression marker_while RESERVED_DO closed_statement
    (91) boolean_expression -> . expression
    (97) expression -> . simple_expression
    (98) expression -> . simple_expression relop simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    boolean_expression             shift and go to state 80
    expression                     shift and go to state 59
    simple_expression              shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 43

    (65) open_for_statement -> RESERVED_FOR . control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement
    (66) closed_for_statement -> RESERVED_FOR . control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement
    (85) control_variable -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    control_variable               shift and go to state 81
    identifier                     shift and go to state 82

state 44

    (71) assignment_statement -> variable_access . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 83


state 45

    (76) procedure_statement -> identifier . params
    (77) procedure_statement -> identifier .
    (72) variable_access -> identifier .
    (79) params -> . LPAREN actual_parameter_list RPAREN

    RESERVED_END    reduce using rule 77 (procedure_statement -> identifier .)
    SEMI_COLON      reduce using rule 77 (procedure_statement -> identifier .)
    RESERVED_UNTIL  reduce using rule 77 (procedure_statement -> identifier .)
    ASSIGNMENT      reduce using rule 72 (variable_access -> identifier .)
    LPAREN          shift and go to state 85

    params                         shift and go to state 84

state 46

    (60) repeat_statement -> RESERVED_REPEAT . repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression
    (61) repeat_begin_marker -> .

    RESERVED_IF     reduce using rule 61 (repeat_begin_marker -> .)
    RESERVED_WHILE  reduce using rule 61 (repeat_begin_marker -> .)
    RESERVED_FOR    reduce using rule 61 (repeat_begin_marker -> .)
    RESERVED_BEGIN  reduce using rule 61 (repeat_begin_marker -> .)
    RESERVED_REPEAT reduce using rule 61 (repeat_begin_marker -> .)
    IDENTIFIER      reduce using rule 61 (repeat_begin_marker -> .)
    RESERVED_STRING reduce using rule 61 (repeat_begin_marker -> .)
    RESERVED_UNTIL  reduce using rule 61 (repeat_begin_marker -> .)
    SEMI_COLON      reduce using rule 61 (repeat_begin_marker -> .)

    repeat_begin_marker            shift and go to state 86

state 47

    (18) procedure_and_function_declaration_part -> function_declaration semicolon .

    RESERVED_BEGIN  reduce using rule 18 (procedure_and_function_declaration_part -> function_declaration semicolon .)
    RESERVED_VAR    reduce using rule 18 (procedure_and_function_declaration_part -> function_declaration semicolon .)
    RESERVED_FUNCTION reduce using rule 18 (procedure_and_function_declaration_part -> function_declaration semicolon .)


state 48

    (14) variable_declaration_part -> RESERVED_VAR variable_declaration_list . semicolon
    (16) variable_declaration_list -> variable_declaration_list . semicolon variable_declaration
    (127) semicolon -> . SEMI_COLON

    SEMI_COLON      shift and go to state 5

    semicolon                      shift and go to state 87

state 49

    (17) variable_declaration_list -> variable_declaration .

    SEMI_COLON      reduce using rule 17 (variable_declaration_list -> variable_declaration .)


state 50

    (15) variable_declaration -> identifier_list . COLON type_denoter
    (4) identifier_list -> identifier_list . comma identifier
    (128) comma -> . COMMA

    COLON           shift and go to state 88
    COMMA           shift and go to state 90

    comma                          shift and go to state 89

state 51

    (5) identifier_list -> identifier .

    COLON           reduce using rule 5 (identifier_list -> identifier .)
    COMMA           reduce using rule 5 (identifier_list -> identifier .)
    RPAREN          reduce using rule 5 (identifier_list -> identifier .)


state 52

    (28) function_declaration -> function_identification semicolon . function_block
    (40) function_block -> . block
    (94) block -> . declaration_part_list statement_part
    (95) block -> . statement_part
    (32) declaration_part_list -> . declaration_part_list declaration_entity
    (33) declaration_part_list -> . declaration_entity
    (41) statement_part -> . compound_statement
    (78) declaration_entity -> . procedure_and_function_declaration_part
    (96) declaration_entity -> . variable_declaration_part
    (42) compound_statement -> . RESERVED_BEGIN statement_sequence RESERVED_END
    (18) procedure_and_function_declaration_part -> . function_declaration semicolon
    (14) variable_declaration_part -> . RESERVED_VAR variable_declaration_list semicolon
    (28) function_declaration -> . function_identification semicolon function_block
    (29) function_declaration -> . function_heading semicolon function_block
    (39) function_identification -> . RESERVED_FUNCTION identifier
    (30) function_heading -> . RESERVED_FUNCTION identifier COLON result_type
    (31) function_heading -> . RESERVED_FUNCTION identifier marker_fh formal_parameter_list COLON result_type

    RESERVED_BEGIN  shift and go to state 16
    RESERVED_VAR    shift and go to state 18
    RESERVED_FUNCTION shift and go to state 21

    function_identification        shift and go to state 19
    function_block                 shift and go to state 91
    block                          shift and go to state 92
    declaration_part_list          shift and go to state 10
    statement_part                 shift and go to state 11
    declaration_entity             shift and go to state 12
    compound_statement             shift and go to state 13
    procedure_and_function_declaration_part shift and go to state 14
    variable_declaration_part      shift and go to state 15
    function_declaration           shift and go to state 17
    function_heading               shift and go to state 20

state 53

    (29) function_declaration -> function_heading semicolon . function_block
    (40) function_block -> . block
    (94) block -> . declaration_part_list statement_part
    (95) block -> . statement_part
    (32) declaration_part_list -> . declaration_part_list declaration_entity
    (33) declaration_part_list -> . declaration_entity
    (41) statement_part -> . compound_statement
    (78) declaration_entity -> . procedure_and_function_declaration_part
    (96) declaration_entity -> . variable_declaration_part
    (42) compound_statement -> . RESERVED_BEGIN statement_sequence RESERVED_END
    (18) procedure_and_function_declaration_part -> . function_declaration semicolon
    (14) variable_declaration_part -> . RESERVED_VAR variable_declaration_list semicolon
    (28) function_declaration -> . function_identification semicolon function_block
    (29) function_declaration -> . function_heading semicolon function_block
    (39) function_identification -> . RESERVED_FUNCTION identifier
    (30) function_heading -> . RESERVED_FUNCTION identifier COLON result_type
    (31) function_heading -> . RESERVED_FUNCTION identifier marker_fh formal_parameter_list COLON result_type

    RESERVED_BEGIN  shift and go to state 16
    RESERVED_VAR    shift and go to state 18
    RESERVED_FUNCTION shift and go to state 21

    function_heading               shift and go to state 20
    function_block                 shift and go to state 93
    block                          shift and go to state 92
    declaration_part_list          shift and go to state 10
    statement_part                 shift and go to state 11
    declaration_entity             shift and go to state 12
    compound_statement             shift and go to state 13
    procedure_and_function_declaration_part shift and go to state 14
    variable_declaration_part      shift and go to state 15
    function_declaration           shift and go to state 17
    function_identification        shift and go to state 19

state 54

    (39) function_identification -> RESERVED_FUNCTION identifier .
    (30) function_heading -> RESERVED_FUNCTION identifier . COLON result_type
    (31) function_heading -> RESERVED_FUNCTION identifier . marker_fh formal_parameter_list COLON result_type
    (34) marker_fh -> .

    SEMI_COLON      reduce using rule 39 (function_identification -> RESERVED_FUNCTION identifier .)
    COLON           shift and go to state 94
    LPAREN          reduce using rule 34 (marker_fh -> .)

    marker_fh                      shift and go to state 95

state 55

    (131) program_heading -> RESERVED_PROGRAM identifier LPAREN identifier_list . RPAREN
    (4) identifier_list -> identifier_list . comma identifier
    (128) comma -> . COMMA

    RPAREN          shift and go to state 96
    COMMA           shift and go to state 90

    comma                          shift and go to state 89

state 56

    (42) compound_statement -> RESERVED_BEGIN statement_sequence RESERVED_END .

    DOT             reduce using rule 42 (compound_statement -> RESERVED_BEGIN statement_sequence RESERVED_END .)
    SEMI_COLON      reduce using rule 42 (compound_statement -> RESERVED_BEGIN statement_sequence RESERVED_END .)
    RESERVED_END    reduce using rule 42 (compound_statement -> RESERVED_BEGIN statement_sequence RESERVED_END .)
    RESERVED_UNTIL  reduce using rule 42 (compound_statement -> RESERVED_BEGIN statement_sequence RESERVED_END .)


state 57

    (44) statement_sequence -> statement_sequence semicolon . statement
    (46) statement -> . open_statement
    (47) statement -> . closed_statement
    (48) open_statement -> . non_labeled_open_statement
    (49) closed_statement -> . non_labeled_closed_statement
    (57) non_labeled_open_statement -> . open_if_statement
    (58) non_labeled_open_statement -> . open_while_statement
    (59) non_labeled_open_statement -> . open_for_statement
    (50) non_labeled_closed_statement -> . assignment_statement
    (51) non_labeled_closed_statement -> . procedure_statement
    (52) non_labeled_closed_statement -> . compound_statement
    (53) non_labeled_closed_statement -> . repeat_statement
    (54) non_labeled_closed_statement -> . closed_while_statement
    (55) non_labeled_closed_statement -> . closed_for_statement
    (56) non_labeled_closed_statement -> .
    (68) open_if_statement -> . RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching statement
    (62) open_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO open_statement
    (65) open_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement
    (71) assignment_statement -> . variable_access ASSIGNMENT expression
    (76) procedure_statement -> . identifier params
    (77) procedure_statement -> . identifier
    (42) compound_statement -> . RESERVED_BEGIN statement_sequence RESERVED_END
    (60) repeat_statement -> . RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression
    (63) closed_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO closed_statement
    (66) closed_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement
    (72) variable_access -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    RESERVED_END    reduce using rule 56 (non_labeled_closed_statement -> .)
    SEMI_COLON      reduce using rule 56 (non_labeled_closed_statement -> .)
    RESERVED_UNTIL  reduce using rule 56 (non_labeled_closed_statement -> .)
    RESERVED_IF     shift and go to state 41
    RESERVED_WHILE  shift and go to state 42
    RESERVED_FOR    shift and go to state 43
    RESERVED_BEGIN  shift and go to state 16
    RESERVED_REPEAT shift and go to state 46
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    statement                      shift and go to state 97
    open_statement                 shift and go to state 28
    closed_statement               shift and go to state 29
    non_labeled_open_statement     shift and go to state 30
    non_labeled_closed_statement   shift and go to state 31
    open_if_statement              shift and go to state 32
    open_while_statement           shift and go to state 33
    open_for_statement             shift and go to state 34
    assignment_statement           shift and go to state 35
    procedure_statement            shift and go to state 36
    compound_statement             shift and go to state 37
    repeat_statement               shift and go to state 38
    closed_while_statement         shift and go to state 39
    closed_for_statement           shift and go to state 40
    variable_access                shift and go to state 44
    identifier                     shift and go to state 45

state 58

    (68) open_if_statement -> RESERVED_IF boolean_expression . RESERVED_THEN marker_for_branching statement

    RESERVED_THEN   shift and go to state 98


state 59

    (91) boolean_expression -> expression .

    RESERVED_THEN   reduce using rule 91 (boolean_expression -> expression .)
    RESERVED_DO     reduce using rule 91 (boolean_expression -> expression .)
    RESERVED_END    reduce using rule 91 (boolean_expression -> expression .)
    SEMI_COLON      reduce using rule 91 (boolean_expression -> expression .)
    RESERVED_UNTIL  reduce using rule 91 (boolean_expression -> expression .)


state 60

    (97) expression -> simple_expression .
    (98) expression -> simple_expression . relop simple_expression
    (27) simple_expression -> simple_expression . addop term
    (119) relop -> . =
    (120) relop -> . NOTEQ
    (121) relop -> . <
    (122) relop -> . >
    (123) relop -> . LESSOREQ
    (124) relop -> . MOREOREQ
    (111) addop -> . +
    (112) addop -> . -
    (113) addop -> . RESERVED_OR

    RESERVED_THEN   reduce using rule 97 (expression -> simple_expression .)
    RESERVED_DO     reduce using rule 97 (expression -> simple_expression .)
    RPAREN          reduce using rule 97 (expression -> simple_expression .)
    RESERVED_END    reduce using rule 97 (expression -> simple_expression .)
    SEMI_COLON      reduce using rule 97 (expression -> simple_expression .)
    RESERVED_UNTIL  reduce using rule 97 (expression -> simple_expression .)
    COLON           reduce using rule 97 (expression -> simple_expression .)
    COMMA           reduce using rule 97 (expression -> simple_expression .)
    RESERVED_TO     reduce using rule 97 (expression -> simple_expression .)
    =               shift and go to state 101
    NOTEQ           shift and go to state 102
    <               shift and go to state 103
    >               shift and go to state 104
    LESSOREQ        shift and go to state 105
    MOREOREQ        shift and go to state 106
    +               shift and go to state 107
    -               shift and go to state 108
    RESERVED_OR     shift and go to state 109

    relop                          shift and go to state 99
    addop                          shift and go to state 100

state 61

    (26) simple_expression -> term .
    (100) term -> term . mulop factor
    (114) mulop -> . *
    (115) mulop -> . /
    (116) mulop -> . RESERVED_DIV
    (117) mulop -> . RESERVED_MOD
    (118) mulop -> . RESERVED_AND

    =               reduce using rule 26 (simple_expression -> term .)
    NOTEQ           reduce using rule 26 (simple_expression -> term .)
    <               reduce using rule 26 (simple_expression -> term .)
    >               reduce using rule 26 (simple_expression -> term .)
    LESSOREQ        reduce using rule 26 (simple_expression -> term .)
    MOREOREQ        reduce using rule 26 (simple_expression -> term .)
    +               reduce using rule 26 (simple_expression -> term .)
    -               reduce using rule 26 (simple_expression -> term .)
    RESERVED_OR     reduce using rule 26 (simple_expression -> term .)
    RESERVED_THEN   reduce using rule 26 (simple_expression -> term .)
    RESERVED_DO     reduce using rule 26 (simple_expression -> term .)
    RPAREN          reduce using rule 26 (simple_expression -> term .)
    RESERVED_END    reduce using rule 26 (simple_expression -> term .)
    SEMI_COLON      reduce using rule 26 (simple_expression -> term .)
    RESERVED_UNTIL  reduce using rule 26 (simple_expression -> term .)
    COLON           reduce using rule 26 (simple_expression -> term .)
    COMMA           reduce using rule 26 (simple_expression -> term .)
    RESERVED_TO     reduce using rule 26 (simple_expression -> term .)
    *               shift and go to state 111
    /               shift and go to state 112
    RESERVED_DIV    shift and go to state 113
    RESERVED_MOD    shift and go to state 114
    RESERVED_AND    shift and go to state 115

    mulop                          shift and go to state 110

state 62

    (99) term -> factor .

    *               reduce using rule 99 (term -> factor .)
    /               reduce using rule 99 (term -> factor .)
    RESERVED_DIV    reduce using rule 99 (term -> factor .)
    RESERVED_MOD    reduce using rule 99 (term -> factor .)
    RESERVED_AND    reduce using rule 99 (term -> factor .)
    =               reduce using rule 99 (term -> factor .)
    NOTEQ           reduce using rule 99 (term -> factor .)
    <               reduce using rule 99 (term -> factor .)
    >               reduce using rule 99 (term -> factor .)
    LESSOREQ        reduce using rule 99 (term -> factor .)
    MOREOREQ        reduce using rule 99 (term -> factor .)
    +               reduce using rule 99 (term -> factor .)
    -               reduce using rule 99 (term -> factor .)
    RESERVED_OR     reduce using rule 99 (term -> factor .)
    RESERVED_THEN   reduce using rule 99 (term -> factor .)
    RESERVED_DO     reduce using rule 99 (term -> factor .)
    RPAREN          reduce using rule 99 (term -> factor .)
    RESERVED_END    reduce using rule 99 (term -> factor .)
    SEMI_COLON      reduce using rule 99 (term -> factor .)
    RESERVED_UNTIL  reduce using rule 99 (term -> factor .)
    COLON           reduce using rule 99 (term -> factor .)
    COMMA           reduce using rule 99 (term -> factor .)
    RESERVED_TO     reduce using rule 99 (term -> factor .)


state 63

    (101) factor -> sign . factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    sign                           shift and go to state 63
    factor                         shift and go to state 116
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 64

    (102) factor -> exponentiation .

    *               reduce using rule 102 (factor -> exponentiation .)
    /               reduce using rule 102 (factor -> exponentiation .)
    RESERVED_DIV    reduce using rule 102 (factor -> exponentiation .)
    RESERVED_MOD    reduce using rule 102 (factor -> exponentiation .)
    RESERVED_AND    reduce using rule 102 (factor -> exponentiation .)
    =               reduce using rule 102 (factor -> exponentiation .)
    NOTEQ           reduce using rule 102 (factor -> exponentiation .)
    <               reduce using rule 102 (factor -> exponentiation .)
    >               reduce using rule 102 (factor -> exponentiation .)
    LESSOREQ        reduce using rule 102 (factor -> exponentiation .)
    MOREOREQ        reduce using rule 102 (factor -> exponentiation .)
    +               reduce using rule 102 (factor -> exponentiation .)
    -               reduce using rule 102 (factor -> exponentiation .)
    RESERVED_OR     reduce using rule 102 (factor -> exponentiation .)
    RESERVED_THEN   reduce using rule 102 (factor -> exponentiation .)
    RESERVED_DO     reduce using rule 102 (factor -> exponentiation .)
    RPAREN          reduce using rule 102 (factor -> exponentiation .)
    RESERVED_END    reduce using rule 102 (factor -> exponentiation .)
    SEMI_COLON      reduce using rule 102 (factor -> exponentiation .)
    RESERVED_UNTIL  reduce using rule 102 (factor -> exponentiation .)
    COLON           reduce using rule 102 (factor -> exponentiation .)
    COMMA           reduce using rule 102 (factor -> exponentiation .)
    RESERVED_TO     reduce using rule 102 (factor -> exponentiation .)


state 65

    (1) sign -> + .

    +               reduce using rule 1 (sign -> + .)
    -               reduce using rule 1 (sign -> + .)
    LPAREN          reduce using rule 1 (sign -> + .)
    RESERVED_NOT    reduce using rule 1 (sign -> + .)
    STRING          reduce using rule 1 (sign -> + .)
    IDENTIFIER      reduce using rule 1 (sign -> + .)
    RESERVED_STRING reduce using rule 1 (sign -> + .)
    DIGITSEQ        reduce using rule 1 (sign -> + .)
    REALNUMBER      reduce using rule 1 (sign -> + .)


state 66

    (2) sign -> - .

    +               reduce using rule 2 (sign -> - .)
    -               reduce using rule 2 (sign -> - .)
    LPAREN          reduce using rule 2 (sign -> - .)
    RESERVED_NOT    reduce using rule 2 (sign -> - .)
    STRING          reduce using rule 2 (sign -> - .)
    IDENTIFIER      reduce using rule 2 (sign -> - .)
    RESERVED_STRING reduce using rule 2 (sign -> - .)
    DIGITSEQ        reduce using rule 2 (sign -> - .)
    REALNUMBER      reduce using rule 2 (sign -> - .)


state 67

    (103) exponentiation -> primary .

    *               reduce using rule 103 (exponentiation -> primary .)
    /               reduce using rule 103 (exponentiation -> primary .)
    RESERVED_DIV    reduce using rule 103 (exponentiation -> primary .)
    RESERVED_MOD    reduce using rule 103 (exponentiation -> primary .)
    RESERVED_AND    reduce using rule 103 (exponentiation -> primary .)
    =               reduce using rule 103 (exponentiation -> primary .)
    NOTEQ           reduce using rule 103 (exponentiation -> primary .)
    <               reduce using rule 103 (exponentiation -> primary .)
    >               reduce using rule 103 (exponentiation -> primary .)
    LESSOREQ        reduce using rule 103 (exponentiation -> primary .)
    MOREOREQ        reduce using rule 103 (exponentiation -> primary .)
    +               reduce using rule 103 (exponentiation -> primary .)
    -               reduce using rule 103 (exponentiation -> primary .)
    RESERVED_OR     reduce using rule 103 (exponentiation -> primary .)
    RESERVED_THEN   reduce using rule 103 (exponentiation -> primary .)
    RESERVED_DO     reduce using rule 103 (exponentiation -> primary .)
    RPAREN          reduce using rule 103 (exponentiation -> primary .)
    RESERVED_END    reduce using rule 103 (exponentiation -> primary .)
    SEMI_COLON      reduce using rule 103 (exponentiation -> primary .)
    RESERVED_UNTIL  reduce using rule 103 (exponentiation -> primary .)
    COLON           reduce using rule 103 (exponentiation -> primary .)
    COMMA           reduce using rule 103 (exponentiation -> primary .)
    RESERVED_TO     reduce using rule 103 (exponentiation -> primary .)


state 68

    (35) primary -> variable_access .

    *               reduce using rule 35 (primary -> variable_access .)
    /               reduce using rule 35 (primary -> variable_access .)
    RESERVED_DIV    reduce using rule 35 (primary -> variable_access .)
    RESERVED_MOD    reduce using rule 35 (primary -> variable_access .)
    RESERVED_AND    reduce using rule 35 (primary -> variable_access .)
    =               reduce using rule 35 (primary -> variable_access .)
    NOTEQ           reduce using rule 35 (primary -> variable_access .)
    <               reduce using rule 35 (primary -> variable_access .)
    >               reduce using rule 35 (primary -> variable_access .)
    LESSOREQ        reduce using rule 35 (primary -> variable_access .)
    MOREOREQ        reduce using rule 35 (primary -> variable_access .)
    +               reduce using rule 35 (primary -> variable_access .)
    -               reduce using rule 35 (primary -> variable_access .)
    RESERVED_OR     reduce using rule 35 (primary -> variable_access .)
    RESERVED_THEN   reduce using rule 35 (primary -> variable_access .)
    RESERVED_DO     reduce using rule 35 (primary -> variable_access .)
    RPAREN          reduce using rule 35 (primary -> variable_access .)
    RESERVED_END    reduce using rule 35 (primary -> variable_access .)
    SEMI_COLON      reduce using rule 35 (primary -> variable_access .)
    RESERVED_UNTIL  reduce using rule 35 (primary -> variable_access .)
    COLON           reduce using rule 35 (primary -> variable_access .)
    COMMA           reduce using rule 35 (primary -> variable_access .)
    RESERVED_TO     reduce using rule 35 (primary -> variable_access .)


state 69

    (36) primary -> unsigned_constant .

    *               reduce using rule 36 (primary -> unsigned_constant .)
    /               reduce using rule 36 (primary -> unsigned_constant .)
    RESERVED_DIV    reduce using rule 36 (primary -> unsigned_constant .)
    RESERVED_MOD    reduce using rule 36 (primary -> unsigned_constant .)
    RESERVED_AND    reduce using rule 36 (primary -> unsigned_constant .)
    =               reduce using rule 36 (primary -> unsigned_constant .)
    NOTEQ           reduce using rule 36 (primary -> unsigned_constant .)
    <               reduce using rule 36 (primary -> unsigned_constant .)
    >               reduce using rule 36 (primary -> unsigned_constant .)
    LESSOREQ        reduce using rule 36 (primary -> unsigned_constant .)
    MOREOREQ        reduce using rule 36 (primary -> unsigned_constant .)
    +               reduce using rule 36 (primary -> unsigned_constant .)
    -               reduce using rule 36 (primary -> unsigned_constant .)
    RESERVED_OR     reduce using rule 36 (primary -> unsigned_constant .)
    RESERVED_THEN   reduce using rule 36 (primary -> unsigned_constant .)
    RESERVED_DO     reduce using rule 36 (primary -> unsigned_constant .)
    RPAREN          reduce using rule 36 (primary -> unsigned_constant .)
    RESERVED_END    reduce using rule 36 (primary -> unsigned_constant .)
    SEMI_COLON      reduce using rule 36 (primary -> unsigned_constant .)
    RESERVED_UNTIL  reduce using rule 36 (primary -> unsigned_constant .)
    COLON           reduce using rule 36 (primary -> unsigned_constant .)
    COMMA           reduce using rule 36 (primary -> unsigned_constant .)
    RESERVED_TO     reduce using rule 36 (primary -> unsigned_constant .)


state 70

    (37) primary -> function_designator .

    *               reduce using rule 37 (primary -> function_designator .)
    /               reduce using rule 37 (primary -> function_designator .)
    RESERVED_DIV    reduce using rule 37 (primary -> function_designator .)
    RESERVED_MOD    reduce using rule 37 (primary -> function_designator .)
    RESERVED_AND    reduce using rule 37 (primary -> function_designator .)
    =               reduce using rule 37 (primary -> function_designator .)
    NOTEQ           reduce using rule 37 (primary -> function_designator .)
    <               reduce using rule 37 (primary -> function_designator .)
    >               reduce using rule 37 (primary -> function_designator .)
    LESSOREQ        reduce using rule 37 (primary -> function_designator .)
    MOREOREQ        reduce using rule 37 (primary -> function_designator .)
    +               reduce using rule 37 (primary -> function_designator .)
    -               reduce using rule 37 (primary -> function_designator .)
    RESERVED_OR     reduce using rule 37 (primary -> function_designator .)
    RESERVED_THEN   reduce using rule 37 (primary -> function_designator .)
    RESERVED_DO     reduce using rule 37 (primary -> function_designator .)
    RPAREN          reduce using rule 37 (primary -> function_designator .)
    RESERVED_END    reduce using rule 37 (primary -> function_designator .)
    SEMI_COLON      reduce using rule 37 (primary -> function_designator .)
    RESERVED_UNTIL  reduce using rule 37 (primary -> function_designator .)
    COLON           reduce using rule 37 (primary -> function_designator .)
    COMMA           reduce using rule 37 (primary -> function_designator .)
    RESERVED_TO     reduce using rule 37 (primary -> function_designator .)


state 71

    (104) primary -> LPAREN . expression RPAREN
    (97) expression -> . simple_expression
    (98) expression -> . simple_expression relop simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    expression                     shift and go to state 117
    simple_expression              shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 72

    (105) primary -> RESERVED_NOT . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    primary                        shift and go to state 118
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 73

    (72) variable_access -> identifier .
    (110) function_designator -> identifier . params
    (79) params -> . LPAREN actual_parameter_list RPAREN

    *               reduce using rule 72 (variable_access -> identifier .)
    /               reduce using rule 72 (variable_access -> identifier .)
    RESERVED_DIV    reduce using rule 72 (variable_access -> identifier .)
    RESERVED_MOD    reduce using rule 72 (variable_access -> identifier .)
    RESERVED_AND    reduce using rule 72 (variable_access -> identifier .)
    =               reduce using rule 72 (variable_access -> identifier .)
    NOTEQ           reduce using rule 72 (variable_access -> identifier .)
    <               reduce using rule 72 (variable_access -> identifier .)
    >               reduce using rule 72 (variable_access -> identifier .)
    LESSOREQ        reduce using rule 72 (variable_access -> identifier .)
    MOREOREQ        reduce using rule 72 (variable_access -> identifier .)
    +               reduce using rule 72 (variable_access -> identifier .)
    -               reduce using rule 72 (variable_access -> identifier .)
    RESERVED_OR     reduce using rule 72 (variable_access -> identifier .)
    RESERVED_THEN   reduce using rule 72 (variable_access -> identifier .)
    RESERVED_DO     reduce using rule 72 (variable_access -> identifier .)
    RPAREN          reduce using rule 72 (variable_access -> identifier .)
    RESERVED_END    reduce using rule 72 (variable_access -> identifier .)
    SEMI_COLON      reduce using rule 72 (variable_access -> identifier .)
    RESERVED_UNTIL  reduce using rule 72 (variable_access -> identifier .)
    COLON           reduce using rule 72 (variable_access -> identifier .)
    COMMA           reduce using rule 72 (variable_access -> identifier .)
    RESERVED_TO     reduce using rule 72 (variable_access -> identifier .)
    LPAREN          shift and go to state 85

    params                         shift and go to state 119

state 74

    (92) unsigned_constant -> unsigned_number .

    *               reduce using rule 92 (unsigned_constant -> unsigned_number .)
    /               reduce using rule 92 (unsigned_constant -> unsigned_number .)
    RESERVED_DIV    reduce using rule 92 (unsigned_constant -> unsigned_number .)
    RESERVED_MOD    reduce using rule 92 (unsigned_constant -> unsigned_number .)
    RESERVED_AND    reduce using rule 92 (unsigned_constant -> unsigned_number .)
    =               reduce using rule 92 (unsigned_constant -> unsigned_number .)
    NOTEQ           reduce using rule 92 (unsigned_constant -> unsigned_number .)
    <               reduce using rule 92 (unsigned_constant -> unsigned_number .)
    >               reduce using rule 92 (unsigned_constant -> unsigned_number .)
    LESSOREQ        reduce using rule 92 (unsigned_constant -> unsigned_number .)
    MOREOREQ        reduce using rule 92 (unsigned_constant -> unsigned_number .)
    +               reduce using rule 92 (unsigned_constant -> unsigned_number .)
    -               reduce using rule 92 (unsigned_constant -> unsigned_number .)
    RESERVED_OR     reduce using rule 92 (unsigned_constant -> unsigned_number .)
    RESERVED_THEN   reduce using rule 92 (unsigned_constant -> unsigned_number .)
    RESERVED_DO     reduce using rule 92 (unsigned_constant -> unsigned_number .)
    RPAREN          reduce using rule 92 (unsigned_constant -> unsigned_number .)
    RESERVED_END    reduce using rule 92 (unsigned_constant -> unsigned_number .)
    SEMI_COLON      reduce using rule 92 (unsigned_constant -> unsigned_number .)
    RESERVED_UNTIL  reduce using rule 92 (unsigned_constant -> unsigned_number .)
    COLON           reduce using rule 92 (unsigned_constant -> unsigned_number .)
    COMMA           reduce using rule 92 (unsigned_constant -> unsigned_number .)
    RESERVED_TO     reduce using rule 92 (unsigned_constant -> unsigned_number .)


state 75

    (93) unsigned_constant -> STRING .

    *               reduce using rule 93 (unsigned_constant -> STRING .)
    /               reduce using rule 93 (unsigned_constant -> STRING .)
    RESERVED_DIV    reduce using rule 93 (unsigned_constant -> STRING .)
    RESERVED_MOD    reduce using rule 93 (unsigned_constant -> STRING .)
    RESERVED_AND    reduce using rule 93 (unsigned_constant -> STRING .)
    =               reduce using rule 93 (unsigned_constant -> STRING .)
    NOTEQ           reduce using rule 93 (unsigned_constant -> STRING .)
    <               reduce using rule 93 (unsigned_constant -> STRING .)
    >               reduce using rule 93 (unsigned_constant -> STRING .)
    LESSOREQ        reduce using rule 93 (unsigned_constant -> STRING .)
    MOREOREQ        reduce using rule 93 (unsigned_constant -> STRING .)
    +               reduce using rule 93 (unsigned_constant -> STRING .)
    -               reduce using rule 93 (unsigned_constant -> STRING .)
    RESERVED_OR     reduce using rule 93 (unsigned_constant -> STRING .)
    RESERVED_THEN   reduce using rule 93 (unsigned_constant -> STRING .)
    RESERVED_DO     reduce using rule 93 (unsigned_constant -> STRING .)
    RPAREN          reduce using rule 93 (unsigned_constant -> STRING .)
    RESERVED_END    reduce using rule 93 (unsigned_constant -> STRING .)
    SEMI_COLON      reduce using rule 93 (unsigned_constant -> STRING .)
    RESERVED_UNTIL  reduce using rule 93 (unsigned_constant -> STRING .)
    COLON           reduce using rule 93 (unsigned_constant -> STRING .)
    COMMA           reduce using rule 93 (unsigned_constant -> STRING .)
    RESERVED_TO     reduce using rule 93 (unsigned_constant -> STRING .)


state 76

    (106) unsigned_number -> unsigned_integer .

    *               reduce using rule 106 (unsigned_number -> unsigned_integer .)
    /               reduce using rule 106 (unsigned_number -> unsigned_integer .)
    RESERVED_DIV    reduce using rule 106 (unsigned_number -> unsigned_integer .)
    RESERVED_MOD    reduce using rule 106 (unsigned_number -> unsigned_integer .)
    RESERVED_AND    reduce using rule 106 (unsigned_number -> unsigned_integer .)
    =               reduce using rule 106 (unsigned_number -> unsigned_integer .)
    NOTEQ           reduce using rule 106 (unsigned_number -> unsigned_integer .)
    <               reduce using rule 106 (unsigned_number -> unsigned_integer .)
    >               reduce using rule 106 (unsigned_number -> unsigned_integer .)
    LESSOREQ        reduce using rule 106 (unsigned_number -> unsigned_integer .)
    MOREOREQ        reduce using rule 106 (unsigned_number -> unsigned_integer .)
    +               reduce using rule 106 (unsigned_number -> unsigned_integer .)
    -               reduce using rule 106 (unsigned_number -> unsigned_integer .)
    RESERVED_OR     reduce using rule 106 (unsigned_number -> unsigned_integer .)
    RESERVED_THEN   reduce using rule 106 (unsigned_number -> unsigned_integer .)
    RESERVED_DO     reduce using rule 106 (unsigned_number -> unsigned_integer .)
    RPAREN          reduce using rule 106 (unsigned_number -> unsigned_integer .)
    RESERVED_END    reduce using rule 106 (unsigned_number -> unsigned_integer .)
    SEMI_COLON      reduce using rule 106 (unsigned_number -> unsigned_integer .)
    RESERVED_UNTIL  reduce using rule 106 (unsigned_number -> unsigned_integer .)
    COLON           reduce using rule 106 (unsigned_number -> unsigned_integer .)
    COMMA           reduce using rule 106 (unsigned_number -> unsigned_integer .)
    RESERVED_TO     reduce using rule 106 (unsigned_number -> unsigned_integer .)


state 77

    (107) unsigned_number -> unsigned_real .

    *               reduce using rule 107 (unsigned_number -> unsigned_real .)
    /               reduce using rule 107 (unsigned_number -> unsigned_real .)
    RESERVED_DIV    reduce using rule 107 (unsigned_number -> unsigned_real .)
    RESERVED_MOD    reduce using rule 107 (unsigned_number -> unsigned_real .)
    RESERVED_AND    reduce using rule 107 (unsigned_number -> unsigned_real .)
    =               reduce using rule 107 (unsigned_number -> unsigned_real .)
    NOTEQ           reduce using rule 107 (unsigned_number -> unsigned_real .)
    <               reduce using rule 107 (unsigned_number -> unsigned_real .)
    >               reduce using rule 107 (unsigned_number -> unsigned_real .)
    LESSOREQ        reduce using rule 107 (unsigned_number -> unsigned_real .)
    MOREOREQ        reduce using rule 107 (unsigned_number -> unsigned_real .)
    +               reduce using rule 107 (unsigned_number -> unsigned_real .)
    -               reduce using rule 107 (unsigned_number -> unsigned_real .)
    RESERVED_OR     reduce using rule 107 (unsigned_number -> unsigned_real .)
    RESERVED_THEN   reduce using rule 107 (unsigned_number -> unsigned_real .)
    RESERVED_DO     reduce using rule 107 (unsigned_number -> unsigned_real .)
    RPAREN          reduce using rule 107 (unsigned_number -> unsigned_real .)
    RESERVED_END    reduce using rule 107 (unsigned_number -> unsigned_real .)
    SEMI_COLON      reduce using rule 107 (unsigned_number -> unsigned_real .)
    RESERVED_UNTIL  reduce using rule 107 (unsigned_number -> unsigned_real .)
    COLON           reduce using rule 107 (unsigned_number -> unsigned_real .)
    COMMA           reduce using rule 107 (unsigned_number -> unsigned_real .)
    RESERVED_TO     reduce using rule 107 (unsigned_number -> unsigned_real .)


state 78

    (108) unsigned_integer -> DIGITSEQ .

    *               reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    /               reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    RESERVED_DIV    reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    RESERVED_MOD    reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    RESERVED_AND    reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    =               reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    NOTEQ           reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    <               reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    >               reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    LESSOREQ        reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    MOREOREQ        reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    +               reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    -               reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    RESERVED_OR     reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    RESERVED_THEN   reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    RESERVED_DO     reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    RPAREN          reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    RESERVED_END    reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    SEMI_COLON      reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    RESERVED_UNTIL  reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    COLON           reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    COMMA           reduce using rule 108 (unsigned_integer -> DIGITSEQ .)
    RESERVED_TO     reduce using rule 108 (unsigned_integer -> DIGITSEQ .)


state 79

    (109) unsigned_real -> REALNUMBER .

    *               reduce using rule 109 (unsigned_real -> REALNUMBER .)
    /               reduce using rule 109 (unsigned_real -> REALNUMBER .)
    RESERVED_DIV    reduce using rule 109 (unsigned_real -> REALNUMBER .)
    RESERVED_MOD    reduce using rule 109 (unsigned_real -> REALNUMBER .)
    RESERVED_AND    reduce using rule 109 (unsigned_real -> REALNUMBER .)
    =               reduce using rule 109 (unsigned_real -> REALNUMBER .)
    NOTEQ           reduce using rule 109 (unsigned_real -> REALNUMBER .)
    <               reduce using rule 109 (unsigned_real -> REALNUMBER .)
    >               reduce using rule 109 (unsigned_real -> REALNUMBER .)
    LESSOREQ        reduce using rule 109 (unsigned_real -> REALNUMBER .)
    MOREOREQ        reduce using rule 109 (unsigned_real -> REALNUMBER .)
    +               reduce using rule 109 (unsigned_real -> REALNUMBER .)
    -               reduce using rule 109 (unsigned_real -> REALNUMBER .)
    RESERVED_OR     reduce using rule 109 (unsigned_real -> REALNUMBER .)
    RESERVED_THEN   reduce using rule 109 (unsigned_real -> REALNUMBER .)
    RESERVED_DO     reduce using rule 109 (unsigned_real -> REALNUMBER .)
    RPAREN          reduce using rule 109 (unsigned_real -> REALNUMBER .)
    RESERVED_END    reduce using rule 109 (unsigned_real -> REALNUMBER .)
    SEMI_COLON      reduce using rule 109 (unsigned_real -> REALNUMBER .)
    RESERVED_UNTIL  reduce using rule 109 (unsigned_real -> REALNUMBER .)
    COLON           reduce using rule 109 (unsigned_real -> REALNUMBER .)
    COMMA           reduce using rule 109 (unsigned_real -> REALNUMBER .)
    RESERVED_TO     reduce using rule 109 (unsigned_real -> REALNUMBER .)


state 80

    (62) open_while_statement -> RESERVED_WHILE boolean_expression . marker_while RESERVED_DO open_statement
    (63) closed_while_statement -> RESERVED_WHILE boolean_expression . marker_while RESERVED_DO closed_statement
    (64) marker_while -> .

    RESERVED_DO     reduce using rule 64 (marker_while -> .)

    marker_while                   shift and go to state 120

state 81

    (65) open_for_statement -> RESERVED_FOR control_variable . ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement
    (66) closed_for_statement -> RESERVED_FOR control_variable . ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement

    ASSIGNMENT      shift and go to state 121


state 82

    (85) control_variable -> identifier .

    ASSIGNMENT      reduce using rule 85 (control_variable -> identifier .)


state 83

    (71) assignment_statement -> variable_access ASSIGNMENT . expression
    (97) expression -> . simple_expression
    (98) expression -> . simple_expression relop simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    variable_access                shift and go to state 68
    expression                     shift and go to state 122
    simple_expression              shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 84

    (76) procedure_statement -> identifier params .

    RESERVED_END    reduce using rule 76 (procedure_statement -> identifier params .)
    SEMI_COLON      reduce using rule 76 (procedure_statement -> identifier params .)
    RESERVED_UNTIL  reduce using rule 76 (procedure_statement -> identifier params .)


state 85

    (79) params -> LPAREN . actual_parameter_list RPAREN
    (80) actual_parameter_list -> . actual_parameter_list comma actual_parameter
    (81) actual_parameter_list -> . actual_parameter
    (82) actual_parameter -> . expression
    (83) actual_parameter -> . expression COLON expression
    (84) actual_parameter -> . expression COLON expression COLON expression
    (97) expression -> . simple_expression
    (98) expression -> . simple_expression relop simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    actual_parameter_list          shift and go to state 123
    actual_parameter               shift and go to state 124
    expression                     shift and go to state 125
    simple_expression              shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 86

    (60) repeat_statement -> RESERVED_REPEAT repeat_begin_marker . statement_sequence RESERVED_UNTIL boolean_expression
    (44) statement_sequence -> . statement_sequence semicolon statement
    (45) statement_sequence -> . statement
    (46) statement -> . open_statement
    (47) statement -> . closed_statement
    (48) open_statement -> . non_labeled_open_statement
    (49) closed_statement -> . non_labeled_closed_statement
    (57) non_labeled_open_statement -> . open_if_statement
    (58) non_labeled_open_statement -> . open_while_statement
    (59) non_labeled_open_statement -> . open_for_statement
    (50) non_labeled_closed_statement -> . assignment_statement
    (51) non_labeled_closed_statement -> . procedure_statement
    (52) non_labeled_closed_statement -> . compound_statement
    (53) non_labeled_closed_statement -> . repeat_statement
    (54) non_labeled_closed_statement -> . closed_while_statement
    (55) non_labeled_closed_statement -> . closed_for_statement
    (56) non_labeled_closed_statement -> .
    (68) open_if_statement -> . RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching statement
    (62) open_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO open_statement
    (65) open_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement
    (71) assignment_statement -> . variable_access ASSIGNMENT expression
    (76) procedure_statement -> . identifier params
    (77) procedure_statement -> . identifier
    (42) compound_statement -> . RESERVED_BEGIN statement_sequence RESERVED_END
    (60) repeat_statement -> . RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression
    (63) closed_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO closed_statement
    (66) closed_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement
    (72) variable_access -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    RESERVED_UNTIL  reduce using rule 56 (non_labeled_closed_statement -> .)
    SEMI_COLON      reduce using rule 56 (non_labeled_closed_statement -> .)
    RESERVED_IF     shift and go to state 41
    RESERVED_WHILE  shift and go to state 42
    RESERVED_FOR    shift and go to state 43
    RESERVED_BEGIN  shift and go to state 16
    RESERVED_REPEAT shift and go to state 46
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    statement_sequence             shift and go to state 126
    statement                      shift and go to state 27
    open_statement                 shift and go to state 28
    closed_statement               shift and go to state 29
    non_labeled_open_statement     shift and go to state 30
    non_labeled_closed_statement   shift and go to state 31
    open_if_statement              shift and go to state 32
    open_while_statement           shift and go to state 33
    open_for_statement             shift and go to state 34
    assignment_statement           shift and go to state 35
    procedure_statement            shift and go to state 36
    compound_statement             shift and go to state 37
    repeat_statement               shift and go to state 38
    closed_while_statement         shift and go to state 39
    closed_for_statement           shift and go to state 40
    variable_access                shift and go to state 44
    identifier                     shift and go to state 45

state 87

    (14) variable_declaration_part -> RESERVED_VAR variable_declaration_list semicolon .
    (16) variable_declaration_list -> variable_declaration_list semicolon . variable_declaration
    (15) variable_declaration -> . identifier_list COLON type_denoter
    (4) identifier_list -> . identifier_list comma identifier
    (5) identifier_list -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    RESERVED_BEGIN  reduce using rule 14 (variable_declaration_part -> RESERVED_VAR variable_declaration_list semicolon .)
    RESERVED_VAR    reduce using rule 14 (variable_declaration_part -> RESERVED_VAR variable_declaration_list semicolon .)
    RESERVED_FUNCTION reduce using rule 14 (variable_declaration_part -> RESERVED_VAR variable_declaration_list semicolon .)
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    variable_declaration           shift and go to state 127
    identifier_list                shift and go to state 50
    identifier                     shift and go to state 51

state 88

    (15) variable_declaration -> identifier_list COLON . type_denoter
    (11) type_denoter -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    type_denoter                   shift and go to state 128
    identifier                     shift and go to state 129

state 89

    (4) identifier_list -> identifier_list comma . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    identifier                     shift and go to state 130

state 90

    (128) comma -> COMMA .

    IDENTIFIER      reduce using rule 128 (comma -> COMMA .)
    RESERVED_STRING reduce using rule 128 (comma -> COMMA .)
    +               reduce using rule 128 (comma -> COMMA .)
    -               reduce using rule 128 (comma -> COMMA .)
    LPAREN          reduce using rule 128 (comma -> COMMA .)
    RESERVED_NOT    reduce using rule 128 (comma -> COMMA .)
    STRING          reduce using rule 128 (comma -> COMMA .)
    DIGITSEQ        reduce using rule 128 (comma -> COMMA .)
    REALNUMBER      reduce using rule 128 (comma -> COMMA .)


state 91

    (28) function_declaration -> function_identification semicolon function_block .

    SEMI_COLON      reduce using rule 28 (function_declaration -> function_identification semicolon function_block .)


state 92

    (40) function_block -> block .

    SEMI_COLON      reduce using rule 40 (function_block -> block .)


state 93

    (29) function_declaration -> function_heading semicolon function_block .

    SEMI_COLON      reduce using rule 29 (function_declaration -> function_heading semicolon function_block .)


state 94

    (30) function_heading -> RESERVED_FUNCTION identifier COLON . result_type
    (38) result_type -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    identifier                     shift and go to state 131
    result_type                    shift and go to state 132

state 95

    (31) function_heading -> RESERVED_FUNCTION identifier marker_fh . formal_parameter_list COLON result_type
    (21) formal_parameter_list -> . LPAREN formal_parameter_section_list RPAREN

    LPAREN          shift and go to state 134

    formal_parameter_list          shift and go to state 133

state 96

    (131) program_heading -> RESERVED_PROGRAM identifier LPAREN identifier_list RPAREN .

    SEMI_COLON      reduce using rule 131 (program_heading -> RESERVED_PROGRAM identifier LPAREN identifier_list RPAREN .)


state 97

    (44) statement_sequence -> statement_sequence semicolon statement .

    RESERVED_END    reduce using rule 44 (statement_sequence -> statement_sequence semicolon statement .)
    SEMI_COLON      reduce using rule 44 (statement_sequence -> statement_sequence semicolon statement .)
    RESERVED_UNTIL  reduce using rule 44 (statement_sequence -> statement_sequence semicolon statement .)


state 98

    (68) open_if_statement -> RESERVED_IF boolean_expression RESERVED_THEN . marker_for_branching statement
    (70) marker_for_branching -> .

    RESERVED_IF     reduce using rule 70 (marker_for_branching -> .)
    RESERVED_WHILE  reduce using rule 70 (marker_for_branching -> .)
    RESERVED_FOR    reduce using rule 70 (marker_for_branching -> .)
    RESERVED_BEGIN  reduce using rule 70 (marker_for_branching -> .)
    RESERVED_REPEAT reduce using rule 70 (marker_for_branching -> .)
    IDENTIFIER      reduce using rule 70 (marker_for_branching -> .)
    RESERVED_STRING reduce using rule 70 (marker_for_branching -> .)
    RESERVED_END    reduce using rule 70 (marker_for_branching -> .)
    SEMI_COLON      reduce using rule 70 (marker_for_branching -> .)
    RESERVED_UNTIL  reduce using rule 70 (marker_for_branching -> .)

    marker_for_branching           shift and go to state 135

state 99

    (98) expression -> simple_expression relop . simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    simple_expression              shift and go to state 136
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 100

    (27) simple_expression -> simple_expression addop . term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    term                           shift and go to state 137
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 101

    (119) relop -> = .

    +               reduce using rule 119 (relop -> = .)
    -               reduce using rule 119 (relop -> = .)
    LPAREN          reduce using rule 119 (relop -> = .)
    RESERVED_NOT    reduce using rule 119 (relop -> = .)
    STRING          reduce using rule 119 (relop -> = .)
    IDENTIFIER      reduce using rule 119 (relop -> = .)
    RESERVED_STRING reduce using rule 119 (relop -> = .)
    DIGITSEQ        reduce using rule 119 (relop -> = .)
    REALNUMBER      reduce using rule 119 (relop -> = .)


state 102

    (120) relop -> NOTEQ .

    +               reduce using rule 120 (relop -> NOTEQ .)
    -               reduce using rule 120 (relop -> NOTEQ .)
    LPAREN          reduce using rule 120 (relop -> NOTEQ .)
    RESERVED_NOT    reduce using rule 120 (relop -> NOTEQ .)
    STRING          reduce using rule 120 (relop -> NOTEQ .)
    IDENTIFIER      reduce using rule 120 (relop -> NOTEQ .)
    RESERVED_STRING reduce using rule 120 (relop -> NOTEQ .)
    DIGITSEQ        reduce using rule 120 (relop -> NOTEQ .)
    REALNUMBER      reduce using rule 120 (relop -> NOTEQ .)


state 103

    (121) relop -> < .

    +               reduce using rule 121 (relop -> < .)
    -               reduce using rule 121 (relop -> < .)
    LPAREN          reduce using rule 121 (relop -> < .)
    RESERVED_NOT    reduce using rule 121 (relop -> < .)
    STRING          reduce using rule 121 (relop -> < .)
    IDENTIFIER      reduce using rule 121 (relop -> < .)
    RESERVED_STRING reduce using rule 121 (relop -> < .)
    DIGITSEQ        reduce using rule 121 (relop -> < .)
    REALNUMBER      reduce using rule 121 (relop -> < .)


state 104

    (122) relop -> > .

    +               reduce using rule 122 (relop -> > .)
    -               reduce using rule 122 (relop -> > .)
    LPAREN          reduce using rule 122 (relop -> > .)
    RESERVED_NOT    reduce using rule 122 (relop -> > .)
    STRING          reduce using rule 122 (relop -> > .)
    IDENTIFIER      reduce using rule 122 (relop -> > .)
    RESERVED_STRING reduce using rule 122 (relop -> > .)
    DIGITSEQ        reduce using rule 122 (relop -> > .)
    REALNUMBER      reduce using rule 122 (relop -> > .)


state 105

    (123) relop -> LESSOREQ .

    +               reduce using rule 123 (relop -> LESSOREQ .)
    -               reduce using rule 123 (relop -> LESSOREQ .)
    LPAREN          reduce using rule 123 (relop -> LESSOREQ .)
    RESERVED_NOT    reduce using rule 123 (relop -> LESSOREQ .)
    STRING          reduce using rule 123 (relop -> LESSOREQ .)
    IDENTIFIER      reduce using rule 123 (relop -> LESSOREQ .)
    RESERVED_STRING reduce using rule 123 (relop -> LESSOREQ .)
    DIGITSEQ        reduce using rule 123 (relop -> LESSOREQ .)
    REALNUMBER      reduce using rule 123 (relop -> LESSOREQ .)


state 106

    (124) relop -> MOREOREQ .

    +               reduce using rule 124 (relop -> MOREOREQ .)
    -               reduce using rule 124 (relop -> MOREOREQ .)
    LPAREN          reduce using rule 124 (relop -> MOREOREQ .)
    RESERVED_NOT    reduce using rule 124 (relop -> MOREOREQ .)
    STRING          reduce using rule 124 (relop -> MOREOREQ .)
    IDENTIFIER      reduce using rule 124 (relop -> MOREOREQ .)
    RESERVED_STRING reduce using rule 124 (relop -> MOREOREQ .)
    DIGITSEQ        reduce using rule 124 (relop -> MOREOREQ .)
    REALNUMBER      reduce using rule 124 (relop -> MOREOREQ .)


state 107

    (111) addop -> + .

    +               reduce using rule 111 (addop -> + .)
    -               reduce using rule 111 (addop -> + .)
    LPAREN          reduce using rule 111 (addop -> + .)
    RESERVED_NOT    reduce using rule 111 (addop -> + .)
    STRING          reduce using rule 111 (addop -> + .)
    IDENTIFIER      reduce using rule 111 (addop -> + .)
    RESERVED_STRING reduce using rule 111 (addop -> + .)
    DIGITSEQ        reduce using rule 111 (addop -> + .)
    REALNUMBER      reduce using rule 111 (addop -> + .)


state 108

    (112) addop -> - .

    +               reduce using rule 112 (addop -> - .)
    -               reduce using rule 112 (addop -> - .)
    LPAREN          reduce using rule 112 (addop -> - .)
    RESERVED_NOT    reduce using rule 112 (addop -> - .)
    STRING          reduce using rule 112 (addop -> - .)
    IDENTIFIER      reduce using rule 112 (addop -> - .)
    RESERVED_STRING reduce using rule 112 (addop -> - .)
    DIGITSEQ        reduce using rule 112 (addop -> - .)
    REALNUMBER      reduce using rule 112 (addop -> - .)


state 109

    (113) addop -> RESERVED_OR .

    +               reduce using rule 113 (addop -> RESERVED_OR .)
    -               reduce using rule 113 (addop -> RESERVED_OR .)
    LPAREN          reduce using rule 113 (addop -> RESERVED_OR .)
    RESERVED_NOT    reduce using rule 113 (addop -> RESERVED_OR .)
    STRING          reduce using rule 113 (addop -> RESERVED_OR .)
    IDENTIFIER      reduce using rule 113 (addop -> RESERVED_OR .)
    RESERVED_STRING reduce using rule 113 (addop -> RESERVED_OR .)
    DIGITSEQ        reduce using rule 113 (addop -> RESERVED_OR .)
    REALNUMBER      reduce using rule 113 (addop -> RESERVED_OR .)


state 110

    (100) term -> term mulop . factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    factor                         shift and go to state 138
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 111

    (114) mulop -> * .

    +               reduce using rule 114 (mulop -> * .)
    -               reduce using rule 114 (mulop -> * .)
    LPAREN          reduce using rule 114 (mulop -> * .)
    RESERVED_NOT    reduce using rule 114 (mulop -> * .)
    STRING          reduce using rule 114 (mulop -> * .)
    IDENTIFIER      reduce using rule 114 (mulop -> * .)
    RESERVED_STRING reduce using rule 114 (mulop -> * .)
    DIGITSEQ        reduce using rule 114 (mulop -> * .)
    REALNUMBER      reduce using rule 114 (mulop -> * .)


state 112

    (115) mulop -> / .

    +               reduce using rule 115 (mulop -> / .)
    -               reduce using rule 115 (mulop -> / .)
    LPAREN          reduce using rule 115 (mulop -> / .)
    RESERVED_NOT    reduce using rule 115 (mulop -> / .)
    STRING          reduce using rule 115 (mulop -> / .)
    IDENTIFIER      reduce using rule 115 (mulop -> / .)
    RESERVED_STRING reduce using rule 115 (mulop -> / .)
    DIGITSEQ        reduce using rule 115 (mulop -> / .)
    REALNUMBER      reduce using rule 115 (mulop -> / .)


state 113

    (116) mulop -> RESERVED_DIV .

    +               reduce using rule 116 (mulop -> RESERVED_DIV .)
    -               reduce using rule 116 (mulop -> RESERVED_DIV .)
    LPAREN          reduce using rule 116 (mulop -> RESERVED_DIV .)
    RESERVED_NOT    reduce using rule 116 (mulop -> RESERVED_DIV .)
    STRING          reduce using rule 116 (mulop -> RESERVED_DIV .)
    IDENTIFIER      reduce using rule 116 (mulop -> RESERVED_DIV .)
    RESERVED_STRING reduce using rule 116 (mulop -> RESERVED_DIV .)
    DIGITSEQ        reduce using rule 116 (mulop -> RESERVED_DIV .)
    REALNUMBER      reduce using rule 116 (mulop -> RESERVED_DIV .)


state 114

    (117) mulop -> RESERVED_MOD .

    +               reduce using rule 117 (mulop -> RESERVED_MOD .)
    -               reduce using rule 117 (mulop -> RESERVED_MOD .)
    LPAREN          reduce using rule 117 (mulop -> RESERVED_MOD .)
    RESERVED_NOT    reduce using rule 117 (mulop -> RESERVED_MOD .)
    STRING          reduce using rule 117 (mulop -> RESERVED_MOD .)
    IDENTIFIER      reduce using rule 117 (mulop -> RESERVED_MOD .)
    RESERVED_STRING reduce using rule 117 (mulop -> RESERVED_MOD .)
    DIGITSEQ        reduce using rule 117 (mulop -> RESERVED_MOD .)
    REALNUMBER      reduce using rule 117 (mulop -> RESERVED_MOD .)


state 115

    (118) mulop -> RESERVED_AND .

    +               reduce using rule 118 (mulop -> RESERVED_AND .)
    -               reduce using rule 118 (mulop -> RESERVED_AND .)
    LPAREN          reduce using rule 118 (mulop -> RESERVED_AND .)
    RESERVED_NOT    reduce using rule 118 (mulop -> RESERVED_AND .)
    STRING          reduce using rule 118 (mulop -> RESERVED_AND .)
    IDENTIFIER      reduce using rule 118 (mulop -> RESERVED_AND .)
    RESERVED_STRING reduce using rule 118 (mulop -> RESERVED_AND .)
    DIGITSEQ        reduce using rule 118 (mulop -> RESERVED_AND .)
    REALNUMBER      reduce using rule 118 (mulop -> RESERVED_AND .)


state 116

    (101) factor -> sign factor .

    *               reduce using rule 101 (factor -> sign factor .)
    /               reduce using rule 101 (factor -> sign factor .)
    RESERVED_DIV    reduce using rule 101 (factor -> sign factor .)
    RESERVED_MOD    reduce using rule 101 (factor -> sign factor .)
    RESERVED_AND    reduce using rule 101 (factor -> sign factor .)
    =               reduce using rule 101 (factor -> sign factor .)
    NOTEQ           reduce using rule 101 (factor -> sign factor .)
    <               reduce using rule 101 (factor -> sign factor .)
    >               reduce using rule 101 (factor -> sign factor .)
    LESSOREQ        reduce using rule 101 (factor -> sign factor .)
    MOREOREQ        reduce using rule 101 (factor -> sign factor .)
    +               reduce using rule 101 (factor -> sign factor .)
    -               reduce using rule 101 (factor -> sign factor .)
    RESERVED_OR     reduce using rule 101 (factor -> sign factor .)
    RESERVED_THEN   reduce using rule 101 (factor -> sign factor .)
    RESERVED_DO     reduce using rule 101 (factor -> sign factor .)
    RPAREN          reduce using rule 101 (factor -> sign factor .)
    RESERVED_END    reduce using rule 101 (factor -> sign factor .)
    SEMI_COLON      reduce using rule 101 (factor -> sign factor .)
    RESERVED_UNTIL  reduce using rule 101 (factor -> sign factor .)
    COLON           reduce using rule 101 (factor -> sign factor .)
    COMMA           reduce using rule 101 (factor -> sign factor .)
    RESERVED_TO     reduce using rule 101 (factor -> sign factor .)


state 117

    (104) primary -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 139


state 118

    (105) primary -> RESERVED_NOT primary .

    *               reduce using rule 105 (primary -> RESERVED_NOT primary .)
    /               reduce using rule 105 (primary -> RESERVED_NOT primary .)
    RESERVED_DIV    reduce using rule 105 (primary -> RESERVED_NOT primary .)
    RESERVED_MOD    reduce using rule 105 (primary -> RESERVED_NOT primary .)
    RESERVED_AND    reduce using rule 105 (primary -> RESERVED_NOT primary .)
    =               reduce using rule 105 (primary -> RESERVED_NOT primary .)
    NOTEQ           reduce using rule 105 (primary -> RESERVED_NOT primary .)
    <               reduce using rule 105 (primary -> RESERVED_NOT primary .)
    >               reduce using rule 105 (primary -> RESERVED_NOT primary .)
    LESSOREQ        reduce using rule 105 (primary -> RESERVED_NOT primary .)
    MOREOREQ        reduce using rule 105 (primary -> RESERVED_NOT primary .)
    +               reduce using rule 105 (primary -> RESERVED_NOT primary .)
    -               reduce using rule 105 (primary -> RESERVED_NOT primary .)
    RESERVED_OR     reduce using rule 105 (primary -> RESERVED_NOT primary .)
    RESERVED_THEN   reduce using rule 105 (primary -> RESERVED_NOT primary .)
    RESERVED_DO     reduce using rule 105 (primary -> RESERVED_NOT primary .)
    RPAREN          reduce using rule 105 (primary -> RESERVED_NOT primary .)
    RESERVED_END    reduce using rule 105 (primary -> RESERVED_NOT primary .)
    SEMI_COLON      reduce using rule 105 (primary -> RESERVED_NOT primary .)
    RESERVED_UNTIL  reduce using rule 105 (primary -> RESERVED_NOT primary .)
    COLON           reduce using rule 105 (primary -> RESERVED_NOT primary .)
    COMMA           reduce using rule 105 (primary -> RESERVED_NOT primary .)
    RESERVED_TO     reduce using rule 105 (primary -> RESERVED_NOT primary .)


state 119

    (110) function_designator -> identifier params .

    *               reduce using rule 110 (function_designator -> identifier params .)
    /               reduce using rule 110 (function_designator -> identifier params .)
    RESERVED_DIV    reduce using rule 110 (function_designator -> identifier params .)
    RESERVED_MOD    reduce using rule 110 (function_designator -> identifier params .)
    RESERVED_AND    reduce using rule 110 (function_designator -> identifier params .)
    =               reduce using rule 110 (function_designator -> identifier params .)
    NOTEQ           reduce using rule 110 (function_designator -> identifier params .)
    <               reduce using rule 110 (function_designator -> identifier params .)
    >               reduce using rule 110 (function_designator -> identifier params .)
    LESSOREQ        reduce using rule 110 (function_designator -> identifier params .)
    MOREOREQ        reduce using rule 110 (function_designator -> identifier params .)
    +               reduce using rule 110 (function_designator -> identifier params .)
    -               reduce using rule 110 (function_designator -> identifier params .)
    RESERVED_OR     reduce using rule 110 (function_designator -> identifier params .)
    RESERVED_THEN   reduce using rule 110 (function_designator -> identifier params .)
    RESERVED_DO     reduce using rule 110 (function_designator -> identifier params .)
    RPAREN          reduce using rule 110 (function_designator -> identifier params .)
    RESERVED_END    reduce using rule 110 (function_designator -> identifier params .)
    SEMI_COLON      reduce using rule 110 (function_designator -> identifier params .)
    RESERVED_UNTIL  reduce using rule 110 (function_designator -> identifier params .)
    COLON           reduce using rule 110 (function_designator -> identifier params .)
    COMMA           reduce using rule 110 (function_designator -> identifier params .)
    RESERVED_TO     reduce using rule 110 (function_designator -> identifier params .)


state 120

    (62) open_while_statement -> RESERVED_WHILE boolean_expression marker_while . RESERVED_DO open_statement
    (63) closed_while_statement -> RESERVED_WHILE boolean_expression marker_while . RESERVED_DO closed_statement

    RESERVED_DO     shift and go to state 140


state 121

    (65) open_for_statement -> RESERVED_FOR control_variable ASSIGNMENT . initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement
    (66) closed_for_statement -> RESERVED_FOR control_variable ASSIGNMENT . initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement
    (86) initial_value -> . expression
    (97) expression -> . simple_expression
    (98) expression -> . simple_expression relop simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    initial_value                  shift and go to state 141
    expression                     shift and go to state 142
    simple_expression              shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 122

    (71) assignment_statement -> variable_access ASSIGNMENT expression .

    RESERVED_END    reduce using rule 71 (assignment_statement -> variable_access ASSIGNMENT expression .)
    SEMI_COLON      reduce using rule 71 (assignment_statement -> variable_access ASSIGNMENT expression .)
    RESERVED_UNTIL  reduce using rule 71 (assignment_statement -> variable_access ASSIGNMENT expression .)


state 123

    (79) params -> LPAREN actual_parameter_list . RPAREN
    (80) actual_parameter_list -> actual_parameter_list . comma actual_parameter
    (128) comma -> . COMMA

    RPAREN          shift and go to state 143
    COMMA           shift and go to state 90

    comma                          shift and go to state 144

state 124

    (81) actual_parameter_list -> actual_parameter .

    RPAREN          reduce using rule 81 (actual_parameter_list -> actual_parameter .)
    COMMA           reduce using rule 81 (actual_parameter_list -> actual_parameter .)


state 125

    (82) actual_parameter -> expression .
    (83) actual_parameter -> expression . COLON expression
    (84) actual_parameter -> expression . COLON expression COLON expression

    RPAREN          reduce using rule 82 (actual_parameter -> expression .)
    COMMA           reduce using rule 82 (actual_parameter -> expression .)
    COLON           shift and go to state 145


state 126

    (60) repeat_statement -> RESERVED_REPEAT repeat_begin_marker statement_sequence . RESERVED_UNTIL boolean_expression
    (44) statement_sequence -> statement_sequence . semicolon statement
    (127) semicolon -> . SEMI_COLON

    RESERVED_UNTIL  shift and go to state 146
    SEMI_COLON      shift and go to state 5

    semicolon                      shift and go to state 57

state 127

    (16) variable_declaration_list -> variable_declaration_list semicolon variable_declaration .

    SEMI_COLON      reduce using rule 16 (variable_declaration_list -> variable_declaration_list semicolon variable_declaration .)


state 128

    (15) variable_declaration -> identifier_list COLON type_denoter .

    SEMI_COLON      reduce using rule 15 (variable_declaration -> identifier_list COLON type_denoter .)


state 129

    (11) type_denoter -> identifier .

    SEMI_COLON      reduce using rule 11 (type_denoter -> identifier .)


state 130

    (4) identifier_list -> identifier_list comma identifier .

    COLON           reduce using rule 4 (identifier_list -> identifier_list comma identifier .)
    COMMA           reduce using rule 4 (identifier_list -> identifier_list comma identifier .)
    RPAREN          reduce using rule 4 (identifier_list -> identifier_list comma identifier .)


state 131

    (38) result_type -> identifier .

    SEMI_COLON      reduce using rule 38 (result_type -> identifier .)


state 132

    (30) function_heading -> RESERVED_FUNCTION identifier COLON result_type .

    SEMI_COLON      reduce using rule 30 (function_heading -> RESERVED_FUNCTION identifier COLON result_type .)


state 133

    (31) function_heading -> RESERVED_FUNCTION identifier marker_fh formal_parameter_list . COLON result_type

    COLON           shift and go to state 147


state 134

    (21) formal_parameter_list -> LPAREN . formal_parameter_section_list RPAREN
    (19) formal_parameter_section_list -> . formal_parameter_section_list semicolon formal_parameter_section
    (20) formal_parameter_section_list -> . formal_parameter_section
    (22) formal_parameter_section -> . value_parameter_specification
    (23) formal_parameter_section -> . variable_parameter_specification
    (24) value_parameter_specification -> . identifier_list COLON identifier
    (43) variable_parameter_specification -> . RESERVED_VAR identifier_list COLON identifier
    (4) identifier_list -> . identifier_list comma identifier
    (5) identifier_list -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    RESERVED_VAR    shift and go to state 153
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    formal_parameter_section_list  shift and go to state 148
    formal_parameter_section       shift and go to state 149
    value_parameter_specification  shift and go to state 150
    variable_parameter_specification shift and go to state 151
    identifier_list                shift and go to state 152
    identifier                     shift and go to state 51

state 135

    (68) open_if_statement -> RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching . statement
    (46) statement -> . open_statement
    (47) statement -> . closed_statement
    (48) open_statement -> . non_labeled_open_statement
    (49) closed_statement -> . non_labeled_closed_statement
    (57) non_labeled_open_statement -> . open_if_statement
    (58) non_labeled_open_statement -> . open_while_statement
    (59) non_labeled_open_statement -> . open_for_statement
    (50) non_labeled_closed_statement -> . assignment_statement
    (51) non_labeled_closed_statement -> . procedure_statement
    (52) non_labeled_closed_statement -> . compound_statement
    (53) non_labeled_closed_statement -> . repeat_statement
    (54) non_labeled_closed_statement -> . closed_while_statement
    (55) non_labeled_closed_statement -> . closed_for_statement
    (56) non_labeled_closed_statement -> .
    (68) open_if_statement -> . RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching statement
    (62) open_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO open_statement
    (65) open_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement
    (71) assignment_statement -> . variable_access ASSIGNMENT expression
    (76) procedure_statement -> . identifier params
    (77) procedure_statement -> . identifier
    (42) compound_statement -> . RESERVED_BEGIN statement_sequence RESERVED_END
    (60) repeat_statement -> . RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression
    (63) closed_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO closed_statement
    (66) closed_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement
    (72) variable_access -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    RESERVED_END    reduce using rule 56 (non_labeled_closed_statement -> .)
    SEMI_COLON      reduce using rule 56 (non_labeled_closed_statement -> .)
    RESERVED_UNTIL  reduce using rule 56 (non_labeled_closed_statement -> .)
    RESERVED_IF     shift and go to state 41
    RESERVED_WHILE  shift and go to state 42
    RESERVED_FOR    shift and go to state 43
    RESERVED_BEGIN  shift and go to state 16
    RESERVED_REPEAT shift and go to state 46
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    statement                      shift and go to state 154
    open_statement                 shift and go to state 28
    closed_statement               shift and go to state 29
    non_labeled_open_statement     shift and go to state 30
    non_labeled_closed_statement   shift and go to state 31
    open_if_statement              shift and go to state 32
    open_while_statement           shift and go to state 33
    open_for_statement             shift and go to state 34
    assignment_statement           shift and go to state 35
    procedure_statement            shift and go to state 36
    compound_statement             shift and go to state 37
    repeat_statement               shift and go to state 38
    closed_while_statement         shift and go to state 39
    closed_for_statement           shift and go to state 40
    variable_access                shift and go to state 44
    identifier                     shift and go to state 45

state 136

    (98) expression -> simple_expression relop simple_expression .
    (27) simple_expression -> simple_expression . addop term
    (111) addop -> . +
    (112) addop -> . -
    (113) addop -> . RESERVED_OR

    RESERVED_THEN   reduce using rule 98 (expression -> simple_expression relop simple_expression .)
    RESERVED_DO     reduce using rule 98 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 98 (expression -> simple_expression relop simple_expression .)
    RESERVED_END    reduce using rule 98 (expression -> simple_expression relop simple_expression .)
    SEMI_COLON      reduce using rule 98 (expression -> simple_expression relop simple_expression .)
    RESERVED_UNTIL  reduce using rule 98 (expression -> simple_expression relop simple_expression .)
    COLON           reduce using rule 98 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 98 (expression -> simple_expression relop simple_expression .)
    RESERVED_TO     reduce using rule 98 (expression -> simple_expression relop simple_expression .)
    +               shift and go to state 107
    -               shift and go to state 108
    RESERVED_OR     shift and go to state 109

    addop                          shift and go to state 100

state 137

    (27) simple_expression -> simple_expression addop term .
    (100) term -> term . mulop factor
    (114) mulop -> . *
    (115) mulop -> . /
    (116) mulop -> . RESERVED_DIV
    (117) mulop -> . RESERVED_MOD
    (118) mulop -> . RESERVED_AND

    =               reduce using rule 27 (simple_expression -> simple_expression addop term .)
    NOTEQ           reduce using rule 27 (simple_expression -> simple_expression addop term .)
    <               reduce using rule 27 (simple_expression -> simple_expression addop term .)
    >               reduce using rule 27 (simple_expression -> simple_expression addop term .)
    LESSOREQ        reduce using rule 27 (simple_expression -> simple_expression addop term .)
    MOREOREQ        reduce using rule 27 (simple_expression -> simple_expression addop term .)
    +               reduce using rule 27 (simple_expression -> simple_expression addop term .)
    -               reduce using rule 27 (simple_expression -> simple_expression addop term .)
    RESERVED_OR     reduce using rule 27 (simple_expression -> simple_expression addop term .)
    RESERVED_THEN   reduce using rule 27 (simple_expression -> simple_expression addop term .)
    RESERVED_DO     reduce using rule 27 (simple_expression -> simple_expression addop term .)
    RPAREN          reduce using rule 27 (simple_expression -> simple_expression addop term .)
    RESERVED_END    reduce using rule 27 (simple_expression -> simple_expression addop term .)
    SEMI_COLON      reduce using rule 27 (simple_expression -> simple_expression addop term .)
    RESERVED_UNTIL  reduce using rule 27 (simple_expression -> simple_expression addop term .)
    COLON           reduce using rule 27 (simple_expression -> simple_expression addop term .)
    COMMA           reduce using rule 27 (simple_expression -> simple_expression addop term .)
    RESERVED_TO     reduce using rule 27 (simple_expression -> simple_expression addop term .)
    *               shift and go to state 111
    /               shift and go to state 112
    RESERVED_DIV    shift and go to state 113
    RESERVED_MOD    shift and go to state 114
    RESERVED_AND    shift and go to state 115

    mulop                          shift and go to state 110

state 138

    (100) term -> term mulop factor .

    *               reduce using rule 100 (term -> term mulop factor .)
    /               reduce using rule 100 (term -> term mulop factor .)
    RESERVED_DIV    reduce using rule 100 (term -> term mulop factor .)
    RESERVED_MOD    reduce using rule 100 (term -> term mulop factor .)
    RESERVED_AND    reduce using rule 100 (term -> term mulop factor .)
    =               reduce using rule 100 (term -> term mulop factor .)
    NOTEQ           reduce using rule 100 (term -> term mulop factor .)
    <               reduce using rule 100 (term -> term mulop factor .)
    >               reduce using rule 100 (term -> term mulop factor .)
    LESSOREQ        reduce using rule 100 (term -> term mulop factor .)
    MOREOREQ        reduce using rule 100 (term -> term mulop factor .)
    +               reduce using rule 100 (term -> term mulop factor .)
    -               reduce using rule 100 (term -> term mulop factor .)
    RESERVED_OR     reduce using rule 100 (term -> term mulop factor .)
    RESERVED_THEN   reduce using rule 100 (term -> term mulop factor .)
    RESERVED_DO     reduce using rule 100 (term -> term mulop factor .)
    RPAREN          reduce using rule 100 (term -> term mulop factor .)
    RESERVED_END    reduce using rule 100 (term -> term mulop factor .)
    SEMI_COLON      reduce using rule 100 (term -> term mulop factor .)
    RESERVED_UNTIL  reduce using rule 100 (term -> term mulop factor .)
    COLON           reduce using rule 100 (term -> term mulop factor .)
    COMMA           reduce using rule 100 (term -> term mulop factor .)
    RESERVED_TO     reduce using rule 100 (term -> term mulop factor .)


state 139

    (104) primary -> LPAREN expression RPAREN .

    *               reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    /               reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    RESERVED_DIV    reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    RESERVED_MOD    reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    RESERVED_AND    reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    =               reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    <               reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    >               reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    LESSOREQ        reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    MOREOREQ        reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    +               reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    -               reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    RESERVED_OR     reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    RESERVED_THEN   reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    RESERVED_DO     reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    RESERVED_END    reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    SEMI_COLON      reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    RESERVED_UNTIL  reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    COLON           reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 104 (primary -> LPAREN expression RPAREN .)
    RESERVED_TO     reduce using rule 104 (primary -> LPAREN expression RPAREN .)


state 140

    (62) open_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO . open_statement
    (63) closed_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO . closed_statement
    (48) open_statement -> . non_labeled_open_statement
    (49) closed_statement -> . non_labeled_closed_statement
    (57) non_labeled_open_statement -> . open_if_statement
    (58) non_labeled_open_statement -> . open_while_statement
    (59) non_labeled_open_statement -> . open_for_statement
    (50) non_labeled_closed_statement -> . assignment_statement
    (51) non_labeled_closed_statement -> . procedure_statement
    (52) non_labeled_closed_statement -> . compound_statement
    (53) non_labeled_closed_statement -> . repeat_statement
    (54) non_labeled_closed_statement -> . closed_while_statement
    (55) non_labeled_closed_statement -> . closed_for_statement
    (56) non_labeled_closed_statement -> .
    (68) open_if_statement -> . RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching statement
    (62) open_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO open_statement
    (65) open_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement
    (71) assignment_statement -> . variable_access ASSIGNMENT expression
    (76) procedure_statement -> . identifier params
    (77) procedure_statement -> . identifier
    (42) compound_statement -> . RESERVED_BEGIN statement_sequence RESERVED_END
    (60) repeat_statement -> . RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression
    (63) closed_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO closed_statement
    (66) closed_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement
    (72) variable_access -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    RESERVED_END    reduce using rule 56 (non_labeled_closed_statement -> .)
    SEMI_COLON      reduce using rule 56 (non_labeled_closed_statement -> .)
    RESERVED_UNTIL  reduce using rule 56 (non_labeled_closed_statement -> .)
    RESERVED_IF     shift and go to state 41
    RESERVED_WHILE  shift and go to state 42
    RESERVED_FOR    shift and go to state 43
    RESERVED_BEGIN  shift and go to state 16
    RESERVED_REPEAT shift and go to state 46
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    open_statement                 shift and go to state 155
    closed_statement               shift and go to state 156
    non_labeled_open_statement     shift and go to state 30
    non_labeled_closed_statement   shift and go to state 31
    open_if_statement              shift and go to state 32
    open_while_statement           shift and go to state 33
    open_for_statement             shift and go to state 34
    assignment_statement           shift and go to state 35
    procedure_statement            shift and go to state 36
    compound_statement             shift and go to state 37
    repeat_statement               shift and go to state 38
    closed_while_statement         shift and go to state 39
    closed_for_statement           shift and go to state 40
    variable_access                shift and go to state 44
    identifier                     shift and go to state 45

state 141

    (65) open_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value . direction final_value marker_for_for_branching RESERVED_DO open_statement
    (66) closed_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value . direction final_value marker_for_for_branching RESERVED_DO closed_statement
    (87) direction -> . RESERVED_TO

    RESERVED_TO     shift and go to state 158

    direction                      shift and go to state 157

state 142

    (86) initial_value -> expression .

    RESERVED_TO     reduce using rule 86 (initial_value -> expression .)


state 143

    (79) params -> LPAREN actual_parameter_list RPAREN .

    RESERVED_END    reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    SEMI_COLON      reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    RESERVED_UNTIL  reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    *               reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    /               reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    RESERVED_DIV    reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    RESERVED_MOD    reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    RESERVED_AND    reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    =               reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    NOTEQ           reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    <               reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    >               reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    LESSOREQ        reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    MOREOREQ        reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    +               reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    -               reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    RESERVED_OR     reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    RESERVED_THEN   reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    RESERVED_DO     reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    RPAREN          reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    COLON           reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    COMMA           reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)
    RESERVED_TO     reduce using rule 79 (params -> LPAREN actual_parameter_list RPAREN .)


state 144

    (80) actual_parameter_list -> actual_parameter_list comma . actual_parameter
    (82) actual_parameter -> . expression
    (83) actual_parameter -> . expression COLON expression
    (84) actual_parameter -> . expression COLON expression COLON expression
    (97) expression -> . simple_expression
    (98) expression -> . simple_expression relop simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    actual_parameter               shift and go to state 159
    expression                     shift and go to state 125
    simple_expression              shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 145

    (83) actual_parameter -> expression COLON . expression
    (84) actual_parameter -> expression COLON . expression COLON expression
    (97) expression -> . simple_expression
    (98) expression -> . simple_expression relop simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    expression                     shift and go to state 160
    simple_expression              shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 146

    (60) repeat_statement -> RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL . boolean_expression
    (91) boolean_expression -> . expression
    (97) expression -> . simple_expression
    (98) expression -> . simple_expression relop simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    boolean_expression             shift and go to state 161
    expression                     shift and go to state 59
    simple_expression              shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 147

    (31) function_heading -> RESERVED_FUNCTION identifier marker_fh formal_parameter_list COLON . result_type
    (38) result_type -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    identifier                     shift and go to state 131
    result_type                    shift and go to state 162

state 148

    (21) formal_parameter_list -> LPAREN formal_parameter_section_list . RPAREN
    (19) formal_parameter_section_list -> formal_parameter_section_list . semicolon formal_parameter_section
    (127) semicolon -> . SEMI_COLON

    RPAREN          shift and go to state 163
    SEMI_COLON      shift and go to state 5

    semicolon                      shift and go to state 164

state 149

    (20) formal_parameter_section_list -> formal_parameter_section .

    RPAREN          reduce using rule 20 (formal_parameter_section_list -> formal_parameter_section .)
    SEMI_COLON      reduce using rule 20 (formal_parameter_section_list -> formal_parameter_section .)


state 150

    (22) formal_parameter_section -> value_parameter_specification .

    RPAREN          reduce using rule 22 (formal_parameter_section -> value_parameter_specification .)
    SEMI_COLON      reduce using rule 22 (formal_parameter_section -> value_parameter_specification .)


state 151

    (23) formal_parameter_section -> variable_parameter_specification .

    RPAREN          reduce using rule 23 (formal_parameter_section -> variable_parameter_specification .)
    SEMI_COLON      reduce using rule 23 (formal_parameter_section -> variable_parameter_specification .)


state 152

    (24) value_parameter_specification -> identifier_list . COLON identifier
    (4) identifier_list -> identifier_list . comma identifier
    (128) comma -> . COMMA

    COLON           shift and go to state 165
    COMMA           shift and go to state 90

    comma                          shift and go to state 89

state 153

    (43) variable_parameter_specification -> RESERVED_VAR . identifier_list COLON identifier
    (4) identifier_list -> . identifier_list comma identifier
    (5) identifier_list -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    identifier_list                shift and go to state 166
    identifier                     shift and go to state 51

state 154

    (68) open_if_statement -> RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching statement .

    RESERVED_END    reduce using rule 68 (open_if_statement -> RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching statement .)
    SEMI_COLON      reduce using rule 68 (open_if_statement -> RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching statement .)
    RESERVED_UNTIL  reduce using rule 68 (open_if_statement -> RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching statement .)


state 155

    (62) open_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO open_statement .

    RESERVED_END    reduce using rule 62 (open_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO open_statement .)
    SEMI_COLON      reduce using rule 62 (open_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO open_statement .)
    RESERVED_UNTIL  reduce using rule 62 (open_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO open_statement .)


state 156

    (63) closed_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO closed_statement .

    RESERVED_END    reduce using rule 63 (closed_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO closed_statement .)
    SEMI_COLON      reduce using rule 63 (closed_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO closed_statement .)
    RESERVED_UNTIL  reduce using rule 63 (closed_while_statement -> RESERVED_WHILE boolean_expression marker_while RESERVED_DO closed_statement .)


state 157

    (65) open_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction . final_value marker_for_for_branching RESERVED_DO open_statement
    (66) closed_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction . final_value marker_for_for_branching RESERVED_DO closed_statement
    (88) final_value -> . expression
    (97) expression -> . simple_expression
    (98) expression -> . simple_expression relop simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    final_value                    shift and go to state 167
    expression                     shift and go to state 168
    simple_expression              shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 158

    (87) direction -> RESERVED_TO .

    +               reduce using rule 87 (direction -> RESERVED_TO .)
    -               reduce using rule 87 (direction -> RESERVED_TO .)
    LPAREN          reduce using rule 87 (direction -> RESERVED_TO .)
    RESERVED_NOT    reduce using rule 87 (direction -> RESERVED_TO .)
    STRING          reduce using rule 87 (direction -> RESERVED_TO .)
    IDENTIFIER      reduce using rule 87 (direction -> RESERVED_TO .)
    RESERVED_STRING reduce using rule 87 (direction -> RESERVED_TO .)
    DIGITSEQ        reduce using rule 87 (direction -> RESERVED_TO .)
    REALNUMBER      reduce using rule 87 (direction -> RESERVED_TO .)


state 159

    (80) actual_parameter_list -> actual_parameter_list comma actual_parameter .

    RPAREN          reduce using rule 80 (actual_parameter_list -> actual_parameter_list comma actual_parameter .)
    COMMA           reduce using rule 80 (actual_parameter_list -> actual_parameter_list comma actual_parameter .)


state 160

    (83) actual_parameter -> expression COLON expression .
    (84) actual_parameter -> expression COLON expression . COLON expression

    RPAREN          reduce using rule 83 (actual_parameter -> expression COLON expression .)
    COMMA           reduce using rule 83 (actual_parameter -> expression COLON expression .)
    COLON           shift and go to state 169


state 161

    (60) repeat_statement -> RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression .

    RESERVED_END    reduce using rule 60 (repeat_statement -> RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression .)
    SEMI_COLON      reduce using rule 60 (repeat_statement -> RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression .)
    RESERVED_UNTIL  reduce using rule 60 (repeat_statement -> RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression .)


state 162

    (31) function_heading -> RESERVED_FUNCTION identifier marker_fh formal_parameter_list COLON result_type .

    SEMI_COLON      reduce using rule 31 (function_heading -> RESERVED_FUNCTION identifier marker_fh formal_parameter_list COLON result_type .)


state 163

    (21) formal_parameter_list -> LPAREN formal_parameter_section_list RPAREN .

    COLON           reduce using rule 21 (formal_parameter_list -> LPAREN formal_parameter_section_list RPAREN .)


state 164

    (19) formal_parameter_section_list -> formal_parameter_section_list semicolon . formal_parameter_section
    (22) formal_parameter_section -> . value_parameter_specification
    (23) formal_parameter_section -> . variable_parameter_specification
    (24) value_parameter_specification -> . identifier_list COLON identifier
    (43) variable_parameter_specification -> . RESERVED_VAR identifier_list COLON identifier
    (4) identifier_list -> . identifier_list comma identifier
    (5) identifier_list -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    RESERVED_VAR    shift and go to state 153
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    formal_parameter_section       shift and go to state 170
    value_parameter_specification  shift and go to state 150
    variable_parameter_specification shift and go to state 151
    identifier_list                shift and go to state 152
    identifier                     shift and go to state 51

state 165

    (24) value_parameter_specification -> identifier_list COLON . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    identifier                     shift and go to state 171

state 166

    (43) variable_parameter_specification -> RESERVED_VAR identifier_list . COLON identifier
    (4) identifier_list -> identifier_list . comma identifier
    (128) comma -> . COMMA

    COLON           shift and go to state 172
    COMMA           shift and go to state 90

    comma                          shift and go to state 89

state 167

    (65) open_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value . marker_for_for_branching RESERVED_DO open_statement
    (66) closed_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value . marker_for_for_branching RESERVED_DO closed_statement
    (67) marker_for_for_branching -> .

    RESERVED_DO     reduce using rule 67 (marker_for_for_branching -> .)

    marker_for_for_branching       shift and go to state 173

state 168

    (88) final_value -> expression .

    RESERVED_DO     reduce using rule 88 (final_value -> expression .)


state 169

    (84) actual_parameter -> expression COLON expression COLON . expression
    (97) expression -> . simple_expression
    (98) expression -> . simple_expression relop simple_expression
    (26) simple_expression -> . term
    (27) simple_expression -> . simple_expression addop term
    (99) term -> . factor
    (100) term -> . term mulop factor
    (101) factor -> . sign factor
    (102) factor -> . exponentiation
    (1) sign -> . +
    (2) sign -> . -
    (103) exponentiation -> . primary
    (35) primary -> . variable_access
    (36) primary -> . unsigned_constant
    (37) primary -> . function_designator
    (104) primary -> . LPAREN expression RPAREN
    (105) primary -> . RESERVED_NOT primary
    (72) variable_access -> . identifier
    (92) unsigned_constant -> . unsigned_number
    (93) unsigned_constant -> . STRING
    (110) function_designator -> . identifier params
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING
    (106) unsigned_number -> . unsigned_integer
    (107) unsigned_number -> . unsigned_real
    (108) unsigned_integer -> . DIGITSEQ
    (109) unsigned_real -> . REALNUMBER

    +               shift and go to state 65
    -               shift and go to state 66
    LPAREN          shift and go to state 71
    RESERVED_NOT    shift and go to state 72
    STRING          shift and go to state 75
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8
    DIGITSEQ        shift and go to state 78
    REALNUMBER      shift and go to state 79

    expression                     shift and go to state 174
    simple_expression              shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    sign                           shift and go to state 63
    exponentiation                 shift and go to state 64
    primary                        shift and go to state 67
    variable_access                shift and go to state 68
    unsigned_constant              shift and go to state 69
    function_designator            shift and go to state 70
    identifier                     shift and go to state 73
    unsigned_number                shift and go to state 74
    unsigned_integer               shift and go to state 76
    unsigned_real                  shift and go to state 77

state 170

    (19) formal_parameter_section_list -> formal_parameter_section_list semicolon formal_parameter_section .

    RPAREN          reduce using rule 19 (formal_parameter_section_list -> formal_parameter_section_list semicolon formal_parameter_section .)
    SEMI_COLON      reduce using rule 19 (formal_parameter_section_list -> formal_parameter_section_list semicolon formal_parameter_section .)


state 171

    (24) value_parameter_specification -> identifier_list COLON identifier .

    RPAREN          reduce using rule 24 (value_parameter_specification -> identifier_list COLON identifier .)
    SEMI_COLON      reduce using rule 24 (value_parameter_specification -> identifier_list COLON identifier .)


state 172

    (43) variable_parameter_specification -> RESERVED_VAR identifier_list COLON . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    identifier                     shift and go to state 175

state 173

    (65) open_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching . RESERVED_DO open_statement
    (66) closed_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching . RESERVED_DO closed_statement

    RESERVED_DO     shift and go to state 176


state 174

    (84) actual_parameter -> expression COLON expression COLON expression .

    RPAREN          reduce using rule 84 (actual_parameter -> expression COLON expression COLON expression .)
    COMMA           reduce using rule 84 (actual_parameter -> expression COLON expression COLON expression .)


state 175

    (43) variable_parameter_specification -> RESERVED_VAR identifier_list COLON identifier .

    RPAREN          reduce using rule 43 (variable_parameter_specification -> RESERVED_VAR identifier_list COLON identifier .)
    SEMI_COLON      reduce using rule 43 (variable_parameter_specification -> RESERVED_VAR identifier_list COLON identifier .)


state 176

    (65) open_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO . open_statement
    (66) closed_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO . closed_statement
    (48) open_statement -> . non_labeled_open_statement
    (49) closed_statement -> . non_labeled_closed_statement
    (57) non_labeled_open_statement -> . open_if_statement
    (58) non_labeled_open_statement -> . open_while_statement
    (59) non_labeled_open_statement -> . open_for_statement
    (50) non_labeled_closed_statement -> . assignment_statement
    (51) non_labeled_closed_statement -> . procedure_statement
    (52) non_labeled_closed_statement -> . compound_statement
    (53) non_labeled_closed_statement -> . repeat_statement
    (54) non_labeled_closed_statement -> . closed_while_statement
    (55) non_labeled_closed_statement -> . closed_for_statement
    (56) non_labeled_closed_statement -> .
    (68) open_if_statement -> . RESERVED_IF boolean_expression RESERVED_THEN marker_for_branching statement
    (62) open_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO open_statement
    (65) open_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement
    (71) assignment_statement -> . variable_access ASSIGNMENT expression
    (76) procedure_statement -> . identifier params
    (77) procedure_statement -> . identifier
    (42) compound_statement -> . RESERVED_BEGIN statement_sequence RESERVED_END
    (60) repeat_statement -> . RESERVED_REPEAT repeat_begin_marker statement_sequence RESERVED_UNTIL boolean_expression
    (63) closed_while_statement -> . RESERVED_WHILE boolean_expression marker_while RESERVED_DO closed_statement
    (66) closed_for_statement -> . RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement
    (72) variable_access -> . identifier
    (125) identifier -> . IDENTIFIER
    (126) identifier -> . RESERVED_STRING

    RESERVED_END    reduce using rule 56 (non_labeled_closed_statement -> .)
    SEMI_COLON      reduce using rule 56 (non_labeled_closed_statement -> .)
    RESERVED_UNTIL  reduce using rule 56 (non_labeled_closed_statement -> .)
    RESERVED_IF     shift and go to state 41
    RESERVED_WHILE  shift and go to state 42
    RESERVED_FOR    shift and go to state 43
    RESERVED_BEGIN  shift and go to state 16
    RESERVED_REPEAT shift and go to state 46
    IDENTIFIER      shift and go to state 7
    RESERVED_STRING shift and go to state 8

    open_statement                 shift and go to state 177
    closed_statement               shift and go to state 178
    non_labeled_open_statement     shift and go to state 30
    non_labeled_closed_statement   shift and go to state 31
    open_if_statement              shift and go to state 32
    open_while_statement           shift and go to state 33
    open_for_statement             shift and go to state 34
    assignment_statement           shift and go to state 35
    procedure_statement            shift and go to state 36
    compound_statement             shift and go to state 37
    repeat_statement               shift and go to state 38
    closed_while_statement         shift and go to state 39
    closed_for_statement           shift and go to state 40
    variable_access                shift and go to state 44
    identifier                     shift and go to state 45

state 177

    (65) open_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement .

    RESERVED_END    reduce using rule 65 (open_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement .)
    SEMI_COLON      reduce using rule 65 (open_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement .)
    RESERVED_UNTIL  reduce using rule 65 (open_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO open_statement .)


state 178

    (66) closed_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement .

    RESERVED_END    reduce using rule 66 (closed_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement .)
    SEMI_COLON      reduce using rule 66 (closed_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement .)
    RESERVED_UNTIL  reduce using rule 66 (closed_for_statement -> RESERVED_FOR control_variable ASSIGNMENT initial_value direction final_value marker_for_for_branching RESERVED_DO closed_statement .)

